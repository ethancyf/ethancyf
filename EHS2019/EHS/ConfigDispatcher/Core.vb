Imports CommonScheduleJob.Component.ScheduleJobControl
Imports CommonScheduleJob.Component.ScheduleJobSuspend
Imports ConfigDispatcher.Logger
Imports System.Configuration

Module Core

#Region "Private Class"

    Private Class Constant
        Public Const ProgramName As String = "SCHEDULE_JOB_SUSPEND_DISPATCHER"
    End Class

#End Region

#Region "Field"

    Private udtScheduleJobControlBLL As ScheduleJobControlBLL
    Private udtScheduleJobSuspendBLL As ScheduleJobSuspendBLL
    Private udtScheduleJobBLL As ScheduleJobBLL
    Private dtScheduleJob As DataTable

#End Region

    Sub Main()
        Log("Program start", EnumLogAction.Start, EnumLogStatus.Information)

        If CheckActiveServer() = False Then Return

        Init()

        Dim blnDeleted As Boolean = False
        Dim dtmLastUpdate As DateTime = GetLastUpdateTime(blnDeleted)

        If blnDeleted OrElse GetUnprocessScheduleJobSuspend(dtmLastUpdate) Then
            Dispatch(dtmLastUpdate)
        End If

        Log("Program end", EnumLogAction.End, EnumLogStatus.Information)

    End Sub

    ' Core function
    Private Function GetLastUpdateTime(ByRef blnDeleted As Boolean) As DateTime

        Dim dtmLastUpdate As DateTime = Nothing
        Dim dtmTmp As DateTime = DateTime.MinValue
        Dim strSJID As String = String.Empty

        blnDeleted = False

        For Each dr As DataRow In dtScheduleJob.Rows
            strSJID = dr(ScheduleJobBLL.Column.SJ_ID)
            dtmTmp = GetLastUpdateTime(strSJID)
            If dtmTmp = New Date(1900, 1, 1) Then
                blnDeleted = True
                Continue For
            End If
            If dtmTmp > dtmLastUpdate Then
                dtmLastUpdate = dtmTmp
            End If
        Next

        Return dtmLastUpdate
    End Function

    Private Function GetLastUpdateTime(ByVal strSJID As String) As DateTime
        Log("Retrieve last processing time from ScheduleJobControl")
        Log("Retrieve ScheduleJobControl")

        Dim strCurrentServer As String = System.Net.Dns.GetHostName.ToUpper
        Dim dt As DataTable = udtScheduleJobControlBLL.GetScheduleJobControl(Constant.ProgramName, strCurrentServer, strSJID)

        Log(String.Format("Retrieve ScheduleJobControl complete: <SJID: {0}><No. of entry: {1}>", strSJID, dt.Rows.Count))

        Dim dtmLastUpdate As DateTime = Nothing

        Select Case dt.Rows.Count
            Case 0
                Log(String.Format("No ScheduleJobControl entry found : <SJID: {0}>, default the last processing time to 1900-01-01 and add to database", strSJID))
                dtmLastUpdate = New Date(1900, 1, 1)

                ' Add back the default data to database
                udtScheduleJobControlBLL.AddScheduleJobControl(Constant.ProgramName, strCurrentServer, strSJID, DateToString(dtmLastUpdate), "Lastly processed Create_Dtm in ScheduleJobSuspend. This entry is auto-generated by ConfigDispatcher")

            Case 1
                ' Check whether the Data is NULL
                Dim dr As DataRow = dt.Rows(0)

                If IsDBNull(dr("Data")) Then
                    Log(String.Format("1 ScheduleJobControl entry found : <SJID: {0}><Data: DBNull.Value>, default the last processing time to 1900-01-01", strSJID))
                    dtmLastUpdate = New Date(1900, 1, 1)

                Else
                    Log(String.Format("1 ScheduleJobControl entry found: <SJID: {0}><Data: {1}>", strSJID, dr("Data")))
                    dtmLastUpdate = StringToDate(dr("Data"))

                End If

            Case Else
                Dim strMessage As String = String.Format("ConfigDispatcher.Core: Unexpected no. of rows returned from ScheduleJobControlBLL.GetScheduleJobControl({0}, {1}, {2})", Constant.ProgramName, strCurrentServer, strSJID)
                Log(String.Format("Throw exception: {0}", strMessage))
                Throw New Exception(strMessage)

        End Select

        Log(String.Format("Retrieve last processing time from ScheduleJobControl complete: <SJID: {0}><Time: {1}>", strSJID, DateToString(dtmLastUpdate)))

        Return dtmLastUpdate

    End Function

    Private Function GetUnprocessScheduleJobSuspend(ByRef dtmLastUpdate As DateTime) As Boolean
        Log("Check any unprocessed ScheduleJobSuspend")

        Try
            Log("Retrieve unprocessed ScheduleJobSuspend")

            Dim ds As DataSet = udtScheduleJobSuspendBLL.GetSuspendByCreateDtm(dtmLastUpdate)

            Dim intUnprocessedEntry As Integer = CInt(ds.Tables(0).Rows(0)(0))
            Log(String.Format("Retrieve unprocessed ScheduleJobSuspend complete: <No. of entry: {0}>", intUnprocessedEntry))

            If intUnprocessedEntry = 0 Then
                Log("Check any unprocessed ScheduleJobSuspend complete: <Continue: False>")
                Return False

            Else
                dtmLastUpdate = ds.Tables(1).Rows(0)(0)
                Log(String.Format("Check any unprocessed ScheduleJobSuspend complete: <Continue: True><New last processing time: {0}>", DateToString(dtmLastUpdate)))
                Return True

            End If

        Catch ex As Exception
            Log(String.Format("Retrieve unprocessed ScheduleJobSuspend fail: <Exception: {0}>", ex.Message))
            Log("Check any unprocessed ScheduleJobSuspend fail: <Continue: False>")
            Return False

        End Try

    End Function


    Private Sub Dispatch(ByVal dtmLastUpdate As DateTime)

        For Each dr As DataRow In dtScheduleJob.Rows
            Dispatch(dr(ScheduleJobBLL.Column.SJ_ID), dr(ScheduleJobBLL.Column.SJ_Path), dtmLastUpdate)
        Next
    End Sub

    Private Sub Dispatch(ByVal strSJID As String, ByVal strDispatchFileName As String, ByVal dtmLastUpdate As DateTime)


        'Dim strDispatchFileName As String = ConfigurationManager.AppSettings("DispatchFileName")

        Log(String.Format("Dispatch file: <SJID: {0}><File name: {1}>", strSJID, strDispatchFileName))

        udtScheduleJobSuspendBLL.WriteOutstandingSuspend(strSJID, strDispatchFileName)

        Log(String.Format("Dispatch file complete: <SJID: {0}><File name: {0}>", strSJID, strDispatchFileName))

        ' Update data to database
        Log(String.Format("Update new last processing time to database: <SJID: {0}><Last processing time: {0}>", strSJID, DateToString(dtmLastUpdate)))

        Dim strCurrentServer As String = System.Net.Dns.GetHostName.ToUpper
        udtScheduleJobControlBLL.UpdateScheduleJobControl(Constant.ProgramName, strCurrentServer, strSJID, DateToString(dtmLastUpdate))

        Log(String.Format("Update new last processing time to database complete: <SJID: {0}>", strSJID))

    End Sub

    ' Side function

    Private Function CheckActiveServer() As Boolean
        Dim strActiveServer As String = ConfigurationManager.AppSettings(Common.Component.ScheduleJobSetting.ActiveServer)

        Log(String.Format("Check active server: <ActiveServer: {0}><CurrentServer: {1}>", strActiveServer, System.Net.Dns.GetHostName))

        If System.Net.Dns.GetHostName.ToUpper <> strActiveServer.ToUpper Then
            Log("Current server is not active server, exit program")
            Log("Program end", EnumLogAction.End, EnumLogStatus.Information)
            Return False
        End If

        Log("Current server is active server, continue process")

        Return True

    End Function

    Private Sub Init()
        udtScheduleJobControlBLL = New ScheduleJobControlBLL
        udtScheduleJobSuspendBLL = New ScheduleJobSuspendBLL
        udtScheduleJobBLL = New ScheduleJobBLL
        dtScheduleJob = udtScheduleJobBLL.GetScheduleJob()
    End Sub

    ' Formatter function

    Private Function DateToString(ByVal dtmInput As DateTime) As String
        Return dtmInput.ToString("yyyy-MM-dd HH:mm:ss.fff")
    End Function

    Private Function StringToDate(ByVal strInput As String) As DateTime
        Return DateTime.ParseExact(strInput.Trim, "yyyy-MM-dd HH:mm:ss.fff", Nothing)
    End Function

End Module
