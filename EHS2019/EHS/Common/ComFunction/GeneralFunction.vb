Imports Common.DataAccess
Imports System.Data.SqlClient
Imports Common.ComObject
Imports Common.Validation
Imports Common.Component.Mapping
Imports Common.Component

Namespace ComFunction

    Public Class GeneralFunction

        Const intMaxInboxIDLength As Integer = 10
        Const intMaxSPIDLength As Integer = 8
        Const intMaxHPSeqNo As Integer = 12
        Private Rand As Random = New Random

        Public Enum EnumTurnOnStatus
            Yes
            No
            Suspend
        End Enum

        Public Function generateChkDgt(ByVal strOriNum As String) As String
            Dim strRes, strTemp, strTenth, strDigital, StrCur, StrNewChkdgt As String
            Dim i, intTemp, intSum As Integer
            'The check digit is generated by LUHN formula Mod 10

            StrNewChkdgt = ""
            intSum = 0
            strRes = ""
            strTenth = ""
            strDigital = ""
            strTemp = strOriNum
            For i = strTemp.Length() - 1 To 0 Step -1
                StrCur = strTemp.Substring(i, 1)
                If StrCur > "9" Then
                    intTemp = CInt(Asc(StrCur) - Asc("A"))
                Else
                    intTemp = CInt(StrCur)
                End If

                If (i Mod 2) = 0 Then
                    intTemp = intTemp * 2
                End If

                While intTemp.ToString.Length() > 1
                    strTenth = intTemp.ToString.Substring(0, 1)
                    strDigital = intTemp.ToString.Substring(1, 1)
                    intTemp = CInt(strTenth) + CInt(strDigital)
                End While
                intSum = intSum + intTemp
            Next
            strRes = (intSum Mod 10).ToString
            Return strRes

        End Function

        Public Function decodeNum(ByVal strOriNum As String) As String

            Dim strRes, strTemp As String
            Dim strPrefix, strNumGen, strChkdgt, strNumtemp As String
            Dim intTranNumLen As Integer = 8
            Dim i As Integer

            If strOriNum.IndexOf("-") > -1 Then
                strPrefix = ""
                strNumGen = ""
                strChkdgt = ""
                strTemp = ""
                strNumtemp = ""
                strRes = ""
                strPrefix = strOriNum.Substring(0, 6)
                strTemp = strOriNum.Substring(7)
                strNumGen = strTemp
                For i = 1 To intTranNumLen - strNumGen.Length()
                    strNumtemp = strNumtemp + "0"
                Next
                strRes = strPrefix + strNumtemp + strNumGen
            Else
                strRes = strOriNum
            End If
            Return strRes

        End Function

        Public Function generateAccountActivationCode() As String

            Dim intMin, intMax As Integer
            Dim strMin, strMax As Integer

            Me.getSystemParameter("ActivationCodeLengthRange", strMin, strMax)
            intMin = Convert.ToInt32(strMin)
            intMax = Convert.ToInt32(strMax)

            Dim Builder As StringBuilder = New StringBuilder
            Dim intCodeLength, i, j As Integer

            intCodeLength = Rand.Next(intMin, intMax)

            For j = 0 To intCodeLength - 1
                i = Rand.Next(0, 2)
                If i = 0 Then
                    Builder.Append(GetInteger())
                Else
                    Builder.Append(GetChar())
                End If
            Next

            Return Builder.ToString
        End Function

        Public Function generateTempFolderPath(Optional ByVal strUniqueID As String = "") As String

            Dim intMin, intMax As Integer
            Dim strMin, strMax As Integer

            Me.getSystemParameter("ActivationCodeLengthRange", strMin, strMax)
            intMin = Convert.ToInt32(strMin)
            intMax = Convert.ToInt32(strMax)

            Dim Builder As StringBuilder = New StringBuilder
            Dim intCodeLength, i, j As Integer

            intCodeLength = Rand.Next(intMin, intMax)

            For j = 0 To intCodeLength - 1
                i = Rand.Next(0, 2)
                If i = 0 Then
                    Builder.Append(GetInteger())
                Else
                    Builder.Append(GetChar())
                End If
            Next

            Return Builder.ToString & strUniqueID
        End Function

        ' CRE16-004 (Enable SP to unlock account) [Start][Winnie]
        ' -----------------------------------------------------------------------------------------
        Public Function generateVerificationCode() As String

            Dim intCodeLength, strCodeLength As Integer

            Me.getSystemParameter("VerificationCodeLength", strCodeLength, String.Empty)
            intCodeLength = Convert.ToInt32(strCodeLength)

            Dim Builder As StringBuilder = New StringBuilder
            Dim i As Integer

            For i = 0 To intCodeLength - 1
                Builder.Append(GetInteger())
            Next

            Return Builder.ToString
        End Function
        ' CRE16-004 (Enable SP to unlock account) [End][Winnie]

        Private Function GetInteger() As Integer
            Dim i As Integer

            Dim checker As Boolean = False

            i = Rand.Next(0, 10)

            Return i

        End Function

        Private Function GetChar() As Char
            Dim ch As Char

            Dim checker As Boolean = False

            ch = Convert.ToChar(Convert.ToInt32(Rand.Next(0, 26) + 65))

            Return ch

        End Function

        ' CRE13-006 - HCVS Ceiling [Start][Tommy L]
        ' -----------------------------------------------------------------------------------------
        ' This method is copied from [Common.ComObject.BaseAuditLogEntry.GetUniqueKey]
        Public Function GetUniqueKey() As String
            Dim size As Integer = 19
            Dim s As String = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890"
            Dim chars() As Char = New Char(62) {}

            chars = s.ToCharArray()

            Dim bytes() As Byte = New Byte(size) {}
            Dim rng As New System.Security.Cryptography.RNGCryptoServiceProvider()

            rng.GetNonZeroBytes(bytes)

            Dim strKey As New System.Text.StringBuilder()
            Dim b As Byte

            For Each b In bytes
                strKey.Append(chars(b Mod (chars.Length - 1)))
            Next

            Return strKey.ToString()
        End Function
        ' CRE13-006 - HCVS Ceiling [End][Tommy L]

        ' CRE13-016 - Upgrade to excel 2007 [Start][Tommy L]
        ' -----------------------------------------------------------------------------------------
        Public Function GetFileNameExtension(ByVal strFileName As String, Optional ByVal blnIsResultWithDot As Boolean = False) As String
            Dim strFileNameTemp As String = strFileName.Trim()
            Dim intDotIndex As Integer = strFileNameTemp.LastIndexOf(".")

            If blnIsResultWithDot Then
                Return strFileNameTemp.Substring(intDotIndex)
            Else
                Return strFileNameTemp.Substring(intDotIndex + 1)
            End If
        End Function
        ' CRE13-016 - Upgrade to excel 2007 [End][Tommy L]

        Public Function generateSystemPassword(ByVal strUserID As String) As String

            'FilePasswordLengthRange

            Dim intMin, intMax As Integer
            Dim strMin, strMax As Integer

            Me.getSystemParameter("FilePasswordLengthRange", strMin, strMax)
            intMin = Convert.ToInt32(strMin)
            intMax = Convert.ToInt32(strMax)

            Dim intLength As Integer = Rand.Next(intMin, intMax)


            Dim intSpecialCharIndex As Integer = Rand.Next(0, intLength)

            Dim strBuilder As StringBuilder = New StringBuilder()
            For i As Integer = 0 To intLength - 1

                Dim intType As Integer = Rand.Next(0, 3)

                If i = intSpecialCharIndex Then
                    If intType = 0 Then
                        strBuilder.Append("!")
                    ElseIf intType = 1 Then
                        strBuilder.Append("$")
                    Else
                        strBuilder.Append("*")
                    End If
                Else
                    If intType = 0 Then
                        strBuilder.Append(Me.GetInteger())
                    ElseIf intType = 1 Then
                        strBuilder.Append(Me.GetChar().ToString.ToUpper())
                    ElseIf intType = 2 Then
                        strBuilder.Append(Me.GetChar().ToString().ToLower())
                    End If
                End If
            Next
            Return strBuilder.ToString()
            'Dim udcValidator As New Validation.Validator
            'Dim strPW As String = ""

            'If Not udcValidator.IsEmpty(strUserID) Then
            '    If strUserID.Length > 8 Then
            '        strPW = Left(strUserID.ToUpper, 8) & "!" & Now.ToString("yyMMdd")
            '    Else
            '        strPW = strUserID.ToUpper & "!" & Now.ToString("yyMMdd")
            '    End If
            'Else
            '    strPW = "SYSTEM" & "!" & Now.ToString("yyMMdd")
            'End If

            'Return strPW
        End Function

        Public Sub seperateHKID(ByVal strOriHKID As String, ByRef strHKID As String, ByRef strHKIDChkdgt As String)
            Dim strtemp As String = String.Empty
            strOriHKID = strOriHKID.Trim.Replace("(", String.Empty).Replace(")", String.Empty)
            strtemp = strOriHKID
            If strtemp.Trim().Equals(String.Empty) Then
                strHKID = String.Empty
                strHKIDChkdgt = String.Empty
            Else
                strHKID = strtemp.Substring(0, strtemp.Length() - 1)
                strHKIDChkdgt = strtemp.Substring(strtemp.Length() - 1, 1)
            End If
        End Sub

        Public Function GetSystemDateTime() As DateTime
            Dim dtmSystem As DateTime
            Dim dt As New DataTable
            Dim db As New Database

            db.RunProc("proc_SystemDateTime_get", dt)
            dtmSystem = CType(dt.Rows(0).Item("DateTime"), DateTime)

            Return dtmSystem
        End Function


        ' CRE11-024-02 HCVS Pilot Extension Part 2 [Start]
        ' -----------------------------------------------------------------------------------------
        ''' <summary>
        ''' If no Service Date provided for the period checking, then use DB current datetime instead
        ''' </summary>
        ''' <param name="dtmPeriodFrom"></param>
        ''' <param name="dtmPeriodTo"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Shared Function IsWithinPeriod(ByVal dtmPeriodFrom As Nullable(Of DateTime), ByVal dtmPeriodTo As Nullable(Of DateTime)) As Boolean
            Return IsWithinPeriod((New ComFunction.GeneralFunction).GetSystemDateTime(), dtmPeriodFrom, dtmPeriodTo)
        End Function

        Public Shared Function IsWithinPeriod(ByVal dtmServiceDate As Nullable(Of DateTime), ByVal dtmPeriodFrom As Nullable(Of DateTime), ByVal dtmPeriodTo As Nullable(Of DateTime)) As Boolean

            Dim isDateFromPassed As Boolean
            Dim isDateToPassed As Boolean

            isDateFromPassed = False
            isDateToPassed = False

            If dtmServiceDate.HasValue Then

                If dtmPeriodFrom.HasValue Then
                    If (DateDiff("s", dtmPeriodFrom, dtmServiceDate) >= 0) Then
                        isDateFromPassed = True
                    Else
                        isDateFromPassed = False
                    End If
                Else
                    ' CRE19-006 (DHC) [Start][Winnie]
                    ' ----------------------------------------------------------------------------------------
                    'isDateFromPassed = True
                    isDateFromPassed = False
                    ' CRE19-006 (DHC) [End][Winnie]
                End If

                If dtmPeriodTo.HasValue Then
                    If (DateDiff("s", dtmServiceDate, dtmPeriodTo) >= 0) Then
                        isDateToPassed = True
                    Else
                        isDateToPassed = False
                    End If
                Else
                    isDateToPassed = True
                End If

            End If

            IsWithinPeriod = (isDateFromPassed And isDateToPassed)

        End Function
        ' CRE11-024-02 HCVS Pilot Extension Part 2 [End]

        Public Function EqualByteArray(ByVal arrByte1 As Byte(), ByVal arrByte2 As Byte()) As Boolean

            Dim blnEqual As Boolean = True

            If arrByte1.Length = arrByte2.Length Then
                For i As Integer = 0 To arrByte1.Length - 1
                    If Not arrByte1(i).Equals(arrByte2(i)) Then
                        blnEqual = False
                        Exit For
                    End If
                Next
            Else
                blnEqual = False
            End If

            Return blnEqual

        End Function

        Public Sub UpdateImageURL(ByVal imgbtn As ImageButton, ByVal enabled As Boolean)
            imgbtn.Enabled = enabled
            If imgbtn.Enabled Then
                If imgbtn.ImageUrl.EndsWith("_D.png") Then
                    imgbtn.ImageUrl = imgbtn.ImageUrl.Replace("_D.png", ".png")
                End If
                If imgbtn.ImageUrl.EndsWith("_D_tw.png") Then
                    imgbtn.ImageUrl = imgbtn.ImageUrl.Replace("_D_tw.png", "_tw.png")
                End If
                imgbtn.Attributes("Style") = "CURSOR: hand"
            Else
                If imgbtn.ImageUrl.EndsWith(".png") And Not (imgbtn.ImageUrl.EndsWith("_D.png") Or imgbtn.ImageUrl.EndsWith("_tw.png") Or imgbtn.ImageUrl.EndsWith("_D_tw.png")) Then
                    imgbtn.ImageUrl = imgbtn.ImageUrl.Replace(".png", "_D.png")
                End If
                If imgbtn.ImageUrl.EndsWith("_tw.png") And Not imgbtn.ImageUrl.EndsWith("_D_tw.png") Then
                    imgbtn.ImageUrl = imgbtn.ImageUrl.Replace("_tw.png", "_D_tw.png")
                End If
                imgbtn.Attributes("Style") = "CURSOR: default"
            End If
        End Sub

        Public Sub UpdateImageURL(ByVal imgbtn As ImageButton)
            Dim enabled As Boolean
            enabled = imgbtn.Enabled
            enabled = imgbtn.Enabled
            UpdateImageURL(imgbtn, enabled)
        End Sub

        ''' <summary>
        ''' To Generate Output File Path For File Generation Queue with : yyyyMMdd\FileName
        ''' </summary>
        ''' <param name="strFileName"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function generateFileOutputPath(ByVal strFileName As String) As String
            Return strFileName.Trim()
        End Function

        Public Function getPageBasePath() As String
            Dim strRes As String = String.Empty
            Dim strpathprefix As String = String.Empty
            Dim strpathpost As String = String.Empty

            strpathprefix = HttpContext.Current.Request.Url.Scheme + "://" + HttpContext.Current.Request.Url.Host
            strpathpost = HttpContext.Current.Request.FilePath
            strpathpost = strpathpost.Substring(0, strpathpost.LastIndexOf("/") + 1)
            strRes = strpathprefix + strpathpost

            Return strRes
        End Function

        Public Function chkDOBtype(ByVal strDOB As String, ByRef dtDOB As Date, ByRef strDOBtype As String, Optional ByVal blnIsTravelDoc As Boolean = False) As Boolean
            Dim blnRes As Boolean = False
            Dim validator As Common.Validation.Validator = New Common.Validation.Validator()
            Dim formatter As Common.Format.Formatter = New Common.Format.Formatter()
            Dim strDOBs As String() = strDOB.Split("-")

            If validator.chkDOB_New(strDOB) Is Nothing Then
                If strDOBs.Length = 1 Then
                    If (strDOBs.GetValue(0).ToString.Length = 8) Then
                        strDOB = String.Format("{0}-{1}-{2}", strDOB.Substring(0, 2), strDOB.Substring(2, 2), strDOB.Substring(4, 4))
                        strDOBtype = "D"
                    ElseIf (strDOBs.GetValue(0).ToString.Length = 6) Then
                        strDOB = String.Format("01-{0}-{1}", strDOB.Substring(0, 2), strDOB.Substring(2, 4))
                        strDOBtype = "M"
                    ElseIf (strDOBs.GetValue(0).ToString.Length = 4) Then
                        strDOB = String.Format("01-01-{0}", strDOB)
                        strDOBtype = "Y"
                    End If
                Else
                    If strDOBs.Length = 2 Then
                        strDOB = String.Format("01-{0}-{1}", strDOBs.GetValue(0), strDOBs.GetValue(1))
                        strDOBtype = "M"
                    ElseIf strDOBs.Length = 3 Then
                        strDOB = String.Format("{0}-{1}-{2}", strDOBs.GetValue(0), strDOBs.GetValue(1), strDOBs.GetValue(2))
                        strDOBtype = "D"
                    End If
                End If
                If blnIsTravelDoc Then
                    Select Case strDOBtype
                        Case "D"
                            strDOBtype = "T"
                        Case "M"
                            strDOBtype = "U"
                        Case "Y"
                            strDOBtype = "V"
                    End Select
                End If

                'CRE13-019-02 Extend HCVS to China [Start][Chris YIM]
                '-----------------------------------------------------------------------------------------
                'strDOB = formatter.formatDate(strDOB)
                strDOB = formatter.formatInputDate(strDOB)
                'CRE13-019-02 Extend HCVS to China [End][Chris YIM]

                strDOB = formatter.convertDate(strDOB, "E")
                dtDOB = CDate(strDOB)
                blnRes = True
            Else
                blnRes = False
            End If

            Return blnRes
        End Function

        Public Function chkContainChineseChar(ByVal strCheckValue As String) As Boolean
            Dim intStringIndex As Integer
            Dim charater As Char
            Dim blnContainChineseChar As Boolean = False

            If Not strCheckValue.Equals(String.Empty) Then
                For intStringIndex = 1 To strCheckValue.Length
                    charater = Strings.GetChar(strCheckValue, intStringIndex)
                    If Char.GetUnicodeCategory(charater) = System.Globalization.UnicodeCategory.OtherLetter Then
                        blnContainChineseChar = True
                        Exit For
                    End If
                Next
            End If

            Return blnContainChineseChar
        End Function

        Public Function calECAgeDOB(ByRef dtDOB As Date, ByRef strDOBType As String, ByVal intAge As Integer, ByVal dtDOR As Date) As Boolean
            Dim blnRes As Boolean = True
            Dim strYear As String

            strYear = dtDOR.AddYears(0 - intAge).Year.ToString
            strDOBType = "A"
            dtDOB = "01 Jan " + strYear

            Return blnRes
        End Function

        Public Function seperateECRefNo(ByVal strOriRefNo As String, ByRef strPreFix As String, ByRef strNum As String, ByRef strPostFix As String, ByRef strChkdgt As String) As Boolean
            Dim blnRes As Boolean = False

            If strOriRefNo.Contains("-") And strOriRefNo.Contains("(") And strOriRefNo.Contains(")") Then
                If strOriRefNo.Split("-").Length = 3 And strOriRefNo.Split("(").Length = 2 Then
                    strPreFix = strOriRefNo.Split("-")(0)
                    strNum = strOriRefNo.Split("-")(1)
                    strPostFix = strOriRefNo.Split("-")(2).Split("(")(0)
                    strChkdgt = strOriRefNo.Split("(")(1).Replace(")", "")
                    blnRes = True
                Else
                    strPreFix = String.Empty
                    strNum = String.Empty
                    strPostFix = String.Empty
                    strChkdgt = String.Empty
                End If
            Else
                If strOriRefNo.Trim.Length = 14 Then
                    strPreFix = strOriRefNo.Substring(0, 4)
                    strNum = strOriRefNo.Substring(4, 7)
                    strPostFix = strOriRefNo.Substring(11, 2)
                    strChkdgt = strOriRefNo.Substring(13, 1)
                    blnRes = True
                Else
                    strPreFix = String.Empty
                    strNum = String.Empty
                    strPostFix = String.Empty
                    strChkdgt = String.Empty
                End If
            End If

            Return blnRes

        End Function

        Public Function GetMonthSelection(ByVal strLanguage As String) As DataTable

            Dim dtTable As New DataTable()
            dtTable.Columns.Add(New DataColumn("Value", GetType(String)))
            dtTable.Columns.Add(New DataColumn("Display", GetType(String)))

            Dim dr As DataRow

            dr = dtTable.NewRow()
            dr("Value") = ""
            dr("Display") = ""
            dtTable.Rows.Add(dr)

            'CRE13-019-02 Extend HCVS to China [Start][Winnie]
            'If strLanguage.ToUpper.Equals("zh-tw".ToUpper()) Then
            If strLanguage.ToUpper.Equals("zh-tw".ToUpper()) OrElse strLanguage.ToUpper.Equals("zh-cn".ToUpper()) Then
                'CRE13-019-02 Extend HCVS to China [End][Winnie]
                dr = dtTable.NewRow()
                dr("Value") = "01"
                dr("Display") = "1"
                dtTable.Rows.Add(dr)

                dr = dtTable.NewRow()
                dr("Value") = "02"
                dr("Display") = "2"
                dtTable.Rows.Add(dr)

                dr = dtTable.NewRow()
                dr("Value") = "03"
                dr("Display") = "3"
                dtTable.Rows.Add(dr)

                dr = dtTable.NewRow()
                dr("Value") = "04"
                dr("Display") = "4"
                dtTable.Rows.Add(dr)

                dr = dtTable.NewRow()
                dr("Value") = "05"
                dr("Display") = "5"
                dtTable.Rows.Add(dr)

                dr = dtTable.NewRow()
                dr("Value") = "06"
                dr("Display") = "6"
                dtTable.Rows.Add(dr)

                dr = dtTable.NewRow()
                dr("Value") = "07"
                dr("Display") = "7"
                dtTable.Rows.Add(dr)

                dr = dtTable.NewRow()
                dr("Value") = "08"
                dr("Display") = "8"
                dtTable.Rows.Add(dr)

                dr = dtTable.NewRow()
                dr("Value") = "09"
                dr("Display") = "9"
                dtTable.Rows.Add(dr)

                dr = dtTable.NewRow()
                dr("Value") = "10"
                dr("Display") = "10"
                dtTable.Rows.Add(dr)

                dr = dtTable.NewRow()
                dr("Value") = "11"
                dr("Display") = "11"
                dtTable.Rows.Add(dr)

                dr = dtTable.NewRow()
                dr("Value") = "12"
                dr("Display") = "12"
                dtTable.Rows.Add(dr)
            Else

                dr = dtTable.NewRow()
                dr("Value") = "01"
                dr("Display") = "January"
                dtTable.Rows.Add(dr)

                dr = dtTable.NewRow()
                dr("Value") = "02"
                dr("Display") = "February"
                dtTable.Rows.Add(dr)

                dr = dtTable.NewRow()
                dr("Value") = "03"
                dr("Display") = "March"
                dtTable.Rows.Add(dr)

                dr = dtTable.NewRow()
                dr("Value") = "04"
                dr("Display") = "April"
                dtTable.Rows.Add(dr)

                dr = dtTable.NewRow()
                dr("Value") = "05"
                dr("Display") = "May"
                dtTable.Rows.Add(dr)

                dr = dtTable.NewRow()
                dr("Value") = "06"
                dr("Display") = "June"
                dtTable.Rows.Add(dr)

                dr = dtTable.NewRow()
                dr("Value") = "07"
                dr("Display") = "July"
                dtTable.Rows.Add(dr)

                dr = dtTable.NewRow()
                dr("Value") = "08"
                dr("Display") = "August"
                dtTable.Rows.Add(dr)

                dr = dtTable.NewRow()
                dr("Value") = "09"
                dr("Display") = "September"
                dtTable.Rows.Add(dr)

                dr = dtTable.NewRow()
                dr("Value") = "10"
                dr("Display") = "October"
                dtTable.Rows.Add(dr)

                dr = dtTable.NewRow()
                dr("Value") = "11"
                dr("Display") = "November"
                dtTable.Rows.Add(dr)

                dr = dtTable.NewRow()
                dr("Value") = "12"
                dr("Display") = "December"
                dtTable.Rows.Add(dr)
            End If

            Return dtTable

        End Function

#Region "SystemParameters"

        ''CRE13-015 Add URL for new EAI server [Start][Karl]
        Private Const External_Use_DataType As SqlDbType = SqlDbType.Char
        Private Const External_Use_DataSize As Integer = 1
        ''CRE13-015 Add URL for new EAI server [End][Karl]

        Private Const Parameter_Name_DataType As SqlDbType = SqlDbType.Char
        Private Const Parameter_Name_DataSize As Integer = 50

        Private Const Scheme_Code_DataType As SqlDbType = SqlDbType.Char
        Private Const Scheme_Code_DataSize As Integer = 10

        Private Const Category_DataType As SqlDbType = SqlDbType.VarChar
        Private Const Category_DataSize As Integer = 20

        ''' <summary>
        ''' Retrieve [SystemParameters] with default scheme code ALL
        ''' </summary>
        ''' <param name="strParameterName"></param>
        ''' <param name="strParm_value1"></param>
        ''' <param name="strParm_value2"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function getSystemParameter(ByVal strParameterName As String, ByRef strParm_value1 As String, ByRef strParm_value2 As String) As Boolean

            Dim udtDB As New Database()
            'Return Me.getSystemParameter(strParameterName, strParm_value1, strParm_value2, udtDB, "")

            Return Me.getSytemParameterByParameterName(strParameterName, strParm_value1, strParm_value2, udtDB)

        End Function

        Public Function getSystemParameterValue1(ByVal strParameterName As String) As String
            Dim strValue1 As String = String.Empty
            Me.getSystemParameter(strParameterName, strValue1, String.Empty)
            Return strValue1
        End Function

        ''' <summary>
        ''' Retrieve [System Parameters] with specific scheme code
        ''' </summary>
        ''' <param name="strParameterName"></param>
        ''' <param name="strParm_value1"></param>
        ''' <param name="strParm_value2"></param>
        ''' <param name="strSchemeCode"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function getSystemParameter(ByVal strParameterName As String, ByRef strParm_value1 As String, ByRef strParm_value2 As String, ByVal strSchemeCode As String) As Boolean

            Dim udtDB As New Database()
            'Return Me.getSystemParameter(strParameterName, strParm_value1, strParm_value2, udtDB, strSchemeCode)

            Return Me.getSytemParameterByParameterNameSchemeCode(strParameterName, strParm_value1, strParm_value2, strSchemeCode, udtDB)

        End Function

        ''' <summary>
        ''' Retrieve [SystemParameters] with customize database and default scheme code ALL
        ''' </summary>
        ''' <param name="strParameterName"></param>
        ''' <param name="strParm_value1"></param>
        ''' <param name="strParm_value2"></param>
        ''' <param name="udtDB"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function getSystemParameter(ByVal strParameterName As String, ByRef strParm_value1 As String, ByRef strParm_value2 As String, ByRef udtDB As Database) As Boolean
            'Me.getSystemParameter(strParameterName, strParm_value1, strParm_value2, udtDB, "")

            Return Me.getSytemParameterByParameterName(strParameterName, strParm_value1, strParm_value2, udtDB)
        End Function

        ''' <summary>
        ''' Retrieve [SystemParameters] with customize database and specific scheme code
        ''' </summary>
        ''' <param name="strParameterName"></param>
        ''' <param name="strParm_value1"></param>
        ''' <param name="strParm_value2"></param>
        ''' <param name="udtDB"></param>
        ''' <param name="strSchemeCode"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function getSystemParameter(ByVal strParameterName As String, ByRef strParm_value1 As String, ByRef strParm_value2 As String, ByRef udtDB As Database, ByVal strSchemeCode As String) As Boolean

            Dim dt As DataTable
            Dim blnRes As Boolean
            blnRes = False

            Try

                ' Add 2009-05-26 To Handle Multi Scheme
                'Search Exact Match the scheme code, If no record found, search Scheme code = 'ALL'

                If HttpContext.Current Is Nothing Then

                    ' For Window Console Program
                    dt = New DataTable()

                    Dim prams() As SqlParameter = { _
                        udtDB.MakeInParam("@Parameter_name", Parameter_Name_DataType, Parameter_Name_DataSize, strParameterName), _
                        udtDB.MakeInParam("@Scheme_Code", Scheme_Code_DataType, Scheme_Code_DataSize, strSchemeCode.Trim())}

                    udtDB.RunProc("proc_SystemParameters_get_byParaName", prams, dt)

                    If dt.Rows.Count = 0 AndAlso strSchemeCode.Trim() <> "" Then
                        Dim prams2() As SqlParameter = { _
                        udtDB.MakeInParam("@Parameter_name", Parameter_Name_DataType, Parameter_Name_DataSize, strParameterName), _
                        udtDB.MakeInParam("@Scheme_Code", Scheme_Code_DataType, Scheme_Code_DataSize, String.Empty)}
                        udtDB.RunProc("proc_SystemParameters_get_byParaName", prams2, dt)
                    End If

                    If dt.Rows.Count = 1 Then
                        If IsDBNull(dt.Rows(0).Item("Parm_Value1")) Then
                            strParm_value1 = String.Empty
                        Else
                            strParm_value1 = dt.Rows(0).Item("Parm_Value1").ToString
                        End If
                        If IsDBNull(dt.Rows(0).Item("Parm_Value2")) Then
                            strParm_value2 = String.Empty
                        Else
                            strParm_value2 = dt.Rows(0).Item("Parm_Value2").ToString
                        End If
                        blnRes = True
                    Else
                        strParm_value1 = String.Empty
                        strParm_value2 = String.Empty
                    End If
                    Return blnRes

                End If
            Catch eSQL As SqlException
                Throw eSQL
            Catch ex As Exception
                Throw ex
                strParm_value1 = String.Empty
                strParm_value2 = String.Empty
                Return False
            End Try

            Try
                '' For Web Application
                Return Me.getSytemParameterByParameterNameSchemeCode(strParameterName, strParm_value1, strParm_value2, strSchemeCode, udtDB)
                'If HttpContext.Current.Cache("SystemParameters") Is Nothing Then
                '    dt = New DataTable()
                '    udtDB.RunProc("proc_SystemParameters_get_cache", dt)
                '    CacheHandler.InsertCache("SystemParameters", dt)
                'Else
                '    dt = CType(HttpContext.Current.Cache("SystemParameters"), DataTable)
                'End If

                '' Add 2009-05-26 To Handle Multi Scheme
                '' Search Exact Match the scheme code, If no record found, search Scheme code = 'ALL'

                'Dim strSelectSchemeCode As String = String.Empty

                'If strSchemeCode.Trim() = String.Empty Then
                '    strSelectSchemeCode = "ALL"
                'Else
                '    strSelectSchemeCode = strSchemeCode.Trim()
                'End If

                'Dim dr() As DataRow = dt.Select("Parameter_Name = '" & strParameterName & "' AND Scheme_Code = '" & strSelectSchemeCode.Trim() & "'")

                'If dr.Length = 0 AndAlso strSelectSchemeCode <> "ALL" Then
                '    dr = dt.Select("Parameter_Name = '" & strParameterName & "' AND Scheme_Code = 'ALL'")
                'End If

                'If dr.Length = 1 Then
                '    If IsDBNull(dr(0).Item("Parm_Value1")) Then
                '        strParm_value1 = String.Empty
                '    Else
                '        strParm_value1 = dr(0).Item("Parm_Value1").ToString
                '    End If
                '    If IsDBNull(dr(0).Item("Parm_Value2")) Then
                '        strParm_value2 = String.Empty
                '    Else
                '        strParm_value2 = dr(0).Item("Parm_Value2").ToString
                '    End If
                '    blnRes = True
                'Else
                '    strParm_value1 = String.Empty
                '    strParm_value2 = String.Empty
                'End If
                'Return blnRes
            Catch eSQL As SqlException
                Throw eSQL
            Catch ex As Exception
                strParm_value1 = String.Empty
                strParm_value2 = String.Empty
                Return False
                Throw ex
            End Try
        End Function
        'CRE13-015 Add URL for new EAI server [Start][Karl]

        Public Function GetInternalSystemParameterByLikeClause(ByVal strParameterName As String, ByVal strSchemeCode As String, ByRef strParm_value1() As String, ByRef strParm_value2() As String) As Boolean
            Dim udtDB As New Database()
            GetInternalSystemParameterByLikeClause = GetSystemParameterByLikeClause(strParameterName, strSchemeCode, "N", strParm_value1, strParm_value2, udtDB)
        End Function

        ''' <summary>
        ''' Retrieve [SystemParameters] with customize database and specific scheme code by like clause
        ''' </summary>
        ''' <param name="strParameterName"></param>
        ''' <param name="strSchemeCode"></param>
        ''' <param name="strParm_value1"></param>        
        ''' <param name="strParm_value2"></param>        
        ''' <param name="udtDB"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Private Function GetSystemParameterByLikeClause(ByVal strParameterName As String, ByVal strSchemeCode As String, ByVal strExternalUse As String, ByRef strParm_value1() As String, ByRef strParm_value2() As String, ByRef udtDB As Database) As Boolean

            Dim dt As DataTable
            Dim blnRes As Boolean
            blnRes = False
            Dim intCount As Integer

            Try

                ' For Window Console Program
                dt = New DataTable()

                Dim parms() As SqlParameter = { _
                    udtDB.MakeInParam("@Parameter_Name", Parameter_Name_DataType, Parameter_Name_DataSize, strParameterName), _
                    udtDB.MakeInParam("@External_Use", External_Use_DataType, External_Use_DataSize, IIf(strExternalUse Is Nothing, String.Empty, strExternalUse)), _
                    udtDB.MakeInParam("@Scheme_Code", Scheme_Code_DataType, Scheme_Code_DataSize, IIf(strSchemeCode Is Nothing, String.Empty, strSchemeCode))}

                udtDB.RunProc("proc_SystemParameters_get_bySchemeCodeExternalUseLikeParaName", parms, dt)


                If dt.Rows.Count > 0 Then
                    For intCount = 0 To dt.Rows.Count - 1
                        ReDim Preserve strParm_value1(intCount)
                        ReDim Preserve strParm_value2(intCount)

                        If IsDBNull(dt.Rows(0).Item("Parm_Value1")) Then
                            strParm_value1(intCount) = String.Empty
                        Else
                            strParm_value1(intCount) = dt.Rows(intCount).Item("Parm_Value1").ToString
                        End If

                        If IsDBNull(dt.Rows(0).Item("Parm_Value2")) Then
                            strParm_value2(intCount) = String.Empty
                        Else
                            strParm_value2(intCount) = dt.Rows(intCount).Item("Parm_Value2").ToString
                        End If
                    Next
                    blnRes = True
                Else
                    blnRes = False
                End If

                Return blnRes

            Catch eSQL As SqlException
                Throw eSQL
            Catch ex As Exception
                Throw ex
                strParm_value1 = Nothing
                strParm_value2 = Nothing
                Return False
            End Try
        End Function


        'CRE13-015 Add URL for new EAI server [End][Karl]

        ''' <summary>
        ''' Retrieve [SystemParameters] Password Field with default scheme code ALL
        ''' </summary>
        ''' <param name="strParameterName"></param>
        ''' <param name="strParm_value1"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function getSystemParameterPassword(ByVal strParameterName As String, ByRef strParm_value1 As String) As Boolean
            Return Me.getSystemParameterPassword(strParameterName, strParm_value1, "")
        End Function

        ''' <summary>
        ''' Retrieve [SystemParameters] Password Field with specific scheme code
        ''' </summary>
        ''' <param name="strParameterName"></param>
        ''' <param name="strParm_value1"></param>
        ''' <param name="strSchemeCode"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function getSystemParameterPassword(ByVal strParameterName As String, ByRef strParm_value1 As String, ByVal strSchemeCode As String) As Boolean

            Dim dt As DataTable
            Dim blnRes As Boolean
            blnRes = False

            Try
                Dim udtdb As Database
                udtdb = New Database()
                dt = New DataTable()

                Dim prams() As SqlParameter = { _
                        udtdb.MakeInParam("@Parameter_Name", Parameter_Name_DataType, Parameter_Name_DataSize, strParameterName), _
                        udtdb.MakeInParam("@Scheme_Code", Scheme_Code_DataType, Scheme_Code_DataSize, strSchemeCode.Trim())}

                udtdb.RunProc("proc_SystemParametersPassword_get", prams, dt)

                If dt.Rows.Count = 0 And strSchemeCode.Trim() <> "" Then
                    Dim prams2() As SqlParameter = { _
                        udtdb.MakeInParam("@Parameter_Name", Parameter_Name_DataType, Parameter_Name_DataSize, strParameterName), _
                        udtdb.MakeInParam("@Scheme_Code", Scheme_Code_DataType, Scheme_Code_DataSize, String.Empty)}
                    udtdb.RunProc("proc_SystemParametersPassword_get", prams2, dt)
                End If

                If dt.Rows.Count = 1 Then
                    If IsDBNull(dt.Rows(0).Item("ParaValue")) Then
                        strParm_value1 = String.Empty
                    Else
                        strParm_value1 = dt.Rows(0).Item("ParaValue").ToString
                    End If
                    blnRes = True
                Else
                    strParm_value1 = String.Empty
                End If
                Return blnRes
            Catch eSQL As SqlException
                Throw eSQL
            Catch ex As Exception
                strParm_value1 = String.Empty
                Return False
                Throw ex
            End Try

        End Function

        ' To Be Confirm If SchemeCode is need to pass in
        ''' <summary>
        ''' To Get the User Defined Parameter By Category and Parameter ID
        ''' </summary>
        ''' <param name="strCategory"></param>
        ''' <param name="strParameterID"></param>
        ''' <returns>String: Parameter Value</returns>
        ''' <remarks></remarks>
        Public Function getUserDefinedParameter(ByVal strCategory As String, ByVal strParameterID As String) As String
            ' Dim dt As DataTable
            Dim strRes As String = String.Empty

            Dim strParm_value1 As String = String.Empty
            Dim strParm_value2 As String = String.Empty

            Me.getSytemParameterByParameterNameSchemeCode(strParameterID, strParm_value1, strParm_value2, "", strCategory)

            strRes = strParm_value1.Trim()

            'Try
            '    Dim udtdb As Database
            '    dt = New DataTable
            '    udtdb = New Database()
            '    Dim prams() As SqlParameter = { _
            '    udtdb.MakeInParam("@Category", Category_DataType, Category_DataSize, strCategory), _
            '    udtdb.MakeInParam("@Parameter_ID", Parameter_Name_DataType, Parameter_Name_DataSize, strParameterID) _
            '                }
            '    udtdb.RunProc("proc_UserDefineParameters_get_ByCatagoryParamID", prams, dt)

            '    If dt.Rows.Count = 1 Then
            '        If IsDBNull(dt.Rows(0).Item("Parm_Value1")) Then
            '            strRes = String.Empty
            '        Else
            '            strRes = dt.Rows(0).Item("Parm_Value1").ToString
            '        End If

            '    Else
            '        strRes = String.Empty
            '    End If
            'Catch eSQL As SqlException
            '    Throw eSQL
            'Catch ex As Exception
            '    Throw ex
            'End Try

            Return strRes
        End Function


        ''' <summary>
        ''' Get the system parameter (internal and external use) by parameter name
        ''' </summary>
        ''' <param name="strParameterName"></param>
        ''' <param name="strParm_value1"></param>
        ''' <param name="strParm_value2"></param>
        ''' <param name="strCategroy"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function getSytemParameterByParameterName(ByVal strParameterName As String, ByRef strParm_value1 As String, ByRef strParm_value2 As String, Optional ByVal strCategroy As String = "") As Boolean

            Dim blnRes As Boolean = False
            blnRes = Me.getSytemParameterByParameterNameSchemeCode(strParameterName, strParm_value1, strParm_value2, "", strCategroy)

            Return blnRes

        End Function

        Public Function getSytemParameterByParameterName(ByVal strParameterName As String, ByRef strParm_value1 As String, ByRef strParm_value2 As String, ByRef udtDB As Database, Optional ByVal strCategroy As String = "") As Boolean

            Dim blnRes As Boolean = False
            blnRes = Me.getSytemParameterByParameterNameSchemeCode(strParameterName, strParm_value1, strParm_value2, "", udtDB, strCategroy)

            Return blnRes

        End Function

        ''' <summary>
        ''' Get the system parameter (internal and external use) by parameter name and Scheme Code
        ''' </summary>
        ''' <param name="strParameterName"></param>
        ''' <param name="strParm_value1"></param>
        ''' <param name="strParm_value2"></param>
        ''' <param name="strSchemeCode"></param>
        ''' <param name="strCategroy"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function getSytemParameterByParameterNameSchemeCode(ByVal strParameterName As String, ByRef strParm_value1 As String, ByRef strParm_value2 As String, ByVal strSchemeCode As String, Optional ByVal strCategroy As String = "") As Boolean
            Dim udtDB As New Database()
            Dim blnRes As Boolean = False
            blnRes = Me.getInternalSystemParameter(strParameterName, strParm_value1, strParm_value2, udtDB, strSchemeCode)

            If strParm_value1.Trim.Equals(String.Empty) AndAlso strParm_value2.Trim.Equals(String.Empty) Then
                blnRes = Me.getExternalSystemParameter(strParameterName, strCategroy, strParm_value1, strParm_value2, udtDB, strSchemeCode)
            End If

            Return blnRes

        End Function

        ''' <summary>
        ''' Get the system parameter (internal and external use) by parameter name with customize database
        ''' </summary>
        ''' <param name="strParameterName"></param>
        ''' <param name="strParm_value1"></param>
        ''' <param name="strParm_value2"></param>
        ''' <param name="strSchemeCode"></param>
        ''' <param name="udtDB"></param>
        ''' <param name="strCategroy"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function getSytemParameterByParameterNameSchemeCode(ByVal strParameterName As String, ByRef strParm_value1 As String, ByRef strParm_value2 As String, ByVal strSchemeCode As String, ByRef udtDB As Database, Optional ByVal strCategroy As String = "") As Boolean
            Dim blnRes As Boolean = False
            blnRes = Me.getInternalSystemParameter(strParameterName, strParm_value1, strParm_value2, udtDB, strSchemeCode)

            If strParm_value1.Trim.Equals(String.Empty) AndAlso strParm_value2.Trim.Equals(String.Empty) Then
                blnRes = Me.getExternalSystemParameter(strParameterName, strCategroy, strParm_value1, strParm_value2, udtDB, strSchemeCode)
            End If

            Return blnRes

        End Function

        ''' <summary>
        ''' Quick way to get the Parm_Value1
        ''' </summary>
        ''' <param name="strParameterName"></param>
        ''' <param name="udtDB"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function getSystemParameter(ByVal strParameterName As String, Optional ByVal udtDB As Database = Nothing) As String
            If IsNothing(udtDB) Then udtDB = New Database()

            Dim strParmValue1 As String = String.Empty
            getSytemParameterByParameterName(strParameterName, strParmValue1, String.Empty, udtDB)

            Return strParmValue1.Trim

        End Function

        ''' <summary>
        ''' Get the system parameter which is for external use
        ''' </summary>
        ''' <param name="strParameterName"></param>
        ''' <param name="strCategory"></param>
        ''' <param name="strParm_value1"></param>
        ''' <param name="strParm_value2"></param>
        ''' <param name="udtDB"></param>
        ''' <param name="strSchemeCode"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Private Function getExternalSystemParameter(ByVal strParameterName As String, ByVal strCategory As String, ByRef strParm_value1 As String, ByRef strParm_value2 As String, ByRef udtDB As Database, ByVal strSchemeCode As String) As Boolean
            Dim dt As DataTable
            Dim blnRes As Boolean

            Try
                dt = New DataTable
                Dim prams() As SqlParameter = { _
                      udtDB.MakeInParam("@parameter_name", Parameter_Name_DataType, Parameter_Name_DataSize, strParameterName.Trim), _
                      udtDB.MakeInParam("@Scheme_Code", Scheme_Code_DataType, Scheme_Code_DataSize, strSchemeCode.Trim) _
                            }
                udtDB.RunProc("proc_SystemParametersExternal_get_byParaName", prams, dt)

                Dim strSelectSchemeCode As String = String.Empty

                If strSchemeCode.Trim() = String.Empty Then
                    strSelectSchemeCode = "ALL"
                Else
                    strSelectSchemeCode = strSchemeCode.Trim()
                End If

                Dim dr() As DataRow
                If strCategory.Trim.Equals(String.Empty) Then
                    dr = dt.Select("Scheme_Code = '" & strSelectSchemeCode.Trim() & "'")
                Else
                    dr = dt.Select("Scheme_Code = '" & strSelectSchemeCode.Trim() & "' AND Category = '" & strCategory.Trim & "'")
                End If


                If dr.Length = 0 AndAlso strSelectSchemeCode <> "ALL" Then
                    If strCategory.Trim.Equals(String.Empty) Then
                        dr = dt.Select("Scheme_Code = 'ALL'")
                    Else
                        dr = dt.Select("Scheme_Code = 'ALL' AND Category = '" & strCategory.Trim & "'")
                    End If

                End If

                If dr.Length = 1 Then
                    If IsDBNull(dr(0).Item("Parm_Value1")) Then
                        strParm_value1 = String.Empty
                    Else
                        strParm_value1 = dr(0).Item("Parm_Value1").ToString
                    End If
                    If IsDBNull(dr(0).Item("Parm_Value2")) Then
                        strParm_value2 = String.Empty
                    Else
                        strParm_value2 = dr(0).Item("Parm_Value2").ToString
                    End If
                    blnRes = True
                Else
                    strParm_value1 = String.Empty
                    strParm_value2 = String.Empty
                End If
                Return blnRes
            Catch eSQL As SqlException
                Throw eSQL
            Catch ex As Exception
                strParm_value1 = String.Empty
                strParm_value2 = String.Empty
                Return False
                Throw ex
            End Try

            Return blnRes
        End Function

        ''' <summary>
        ''' Get the system parameter which is internal use only. Also, the system parameter is in cache
        ''' </summary>
        ''' <param name="strParameterName"></param>
        ''' <param name="strParm_value1"></param>
        ''' <param name="strParm_value2"></param>
        ''' <param name="udtDB"></param>
        ''' <param name="strSchemeCode"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Private Function getInternalSystemParameter(ByVal strParameterName As String, ByRef strParm_value1 As String, ByRef strParm_value2 As String, ByRef udtDB As Database, ByVal strSchemeCode As String) As Boolean
            Dim dt As DataTable
            Dim blnRes As Boolean

            Try
                If HttpContext.Current Is Nothing Then
                    dt = New DataTable()
                    udtDB.RunProc("proc_SystemParameters_get_cache", dt)
                Else
                    If HttpContext.Current.Cache("SystemParameters") Is Nothing Then
                        dt = New DataTable()
                        udtDB.RunProc("proc_SystemParameters_get_cache", dt)
                        CacheHandler.InsertCache("SystemParameters", dt)
                    Else
                        dt = CType(HttpContext.Current.Cache("SystemParameters"), DataTable)
                    End If
                End If

                Dim strSelectSchemeCode As String = String.Empty

                If strSchemeCode.Trim() = String.Empty Then
                    strSelectSchemeCode = "ALL"
                Else
                    strSelectSchemeCode = strSchemeCode.Trim()
                End If

                Dim dr() As DataRow = dt.Select("Parameter_Name = '" & strParameterName & "' AND Scheme_Code = '" & strSelectSchemeCode.Trim() & "'")

                If dr.Length = 0 AndAlso strSelectSchemeCode <> "ALL" Then
                    dr = dt.Select("Parameter_Name = '" & strParameterName & "' AND Scheme_Code = 'ALL'")
                End If

                If dr.Length = 1 Then
                    If IsDBNull(dr(0).Item("Parm_Value1")) Then
                        strParm_value1 = String.Empty
                    Else
                        strParm_value1 = dr(0).Item("Parm_Value1").ToString
                    End If
                    If IsDBNull(dr(0).Item("Parm_Value2")) Then
                        strParm_value2 = String.Empty
                    Else
                        strParm_value2 = dr(0).Item("Parm_Value2").ToString
                    End If
                    blnRes = True
                Else
                    strParm_value1 = String.Empty
                    strParm_value2 = String.Empty
                End If

            Catch eSQL As SqlException
                Throw eSQL
            Catch ex As Exception
                strParm_value1 = String.Empty
                strParm_value2 = String.Empty
                Return False
                Throw ex
            End Try

            Return blnRes

        End Function

        Public Function GetSystemParameterParmValue1(strParameterName As String, Optional strSchemeCode As String = "", Optional udtDB As Database = Nothing) As String
            Dim dt As DataTable = Nothing

            If IsNothing(HttpContext.Current) Then
                dt = New DataTable

                If IsNothing(udtDB) Then udtDB = New Database()

                udtDB.RunProc("proc_SystemParameters_get_cache", dt)

            Else
                dt = HttpContext.Current.Cache("SystemParameters")

                If IsNothing(dt) Then
                    dt = New DataTable

                    If IsNothing(udtDB) Then udtDB = New Database()

                    udtDB.RunProc("proc_SystemParameters_get_cache", dt)
                    CacheHandler.InsertCache("SystemParameters", dt)

                End If

            End If

            If strSchemeCode = String.Empty Then strSchemeCode = "ALL"

            Dim drs() As DataRow = dt.Select(String.Format("Parameter_Name = '{0}' AND Scheme_Code = '{1}'", strParameterName, strSchemeCode))

            If drs.Length = 0 Then
                Throw New Exception(String.Format("GeneralFunction.GetSystemParameterParmValue1: Unexpected value (dr.Length={0},strParameterName={1},strSchemeCode={2})", drs.Length, strParameterName, strSchemeCode))
            End If

            Dim dr As DataRow = drs(0)

            If IsDBNull(dr("Parm_Value1")) Then
                Return String.Empty
            Else
                Return dr("Parm_Value1").ToString.Trim
            End If

        End Function

#End Region

#Region "System Number"

        Private Const Profile_ID_DataType As SqlDbType = SqlDbType.Char
        Private Const Profile_ID_DataSize As Integer = 10

        Private Const Profile_Year_DataType As SqlDbType = SqlDbType.SmallInt
        Private Const Profile_Year_DataSize As Integer = 2

        Private Const Profile_Month_DataType As SqlDbType = SqlDbType.SmallInt
        Private Const Profile_Month_DataSize As Integer = 2

        'CRE15-003 System-generated Form [Start][Philip Chau]
        ''' <summary>
        ''' Retrieve SystemProfile Profile_Prefix
        ''' </summary>
        ''' <param name="strSeqNoType"></param>
        ''' <param name="strSchemeCode"></param>
        ''' <returns>Profile_Prefix</returns>
        ''' <remarks></remarks>
        Public Function getSeqNo_Prefix_Without_Update_ProfileNum(ByVal strSeqNoType As String, ByVal strSchemeCode As String) As String
            Dim strPrefix As String = String.Empty

            Dim dt As DataTable = New DataTable()
            Dim udtDB As Database = New Database()

            Try
                strPrefix = Me.getSeqNo_Prefix_Without_Update_ProfileNum(strSeqNoType, strSchemeCode, udtDB)
            Catch ex As Exception
                Throw
            End Try
            Return strPrefix
        End Function

        ''' <summary>
        ''' Retrieve SystemProfile Profile_Prefix
        ''' </summary>
        ''' <param name="strSeqNoType"></param>
        ''' <param name="strSchemeCode"></param>
        ''' <param name="udtDB"></param>
        ''' <returns>Profile_Prefix</returns>
        ''' <remarks></remarks>
        Private Function getSeqNo_Prefix_Without_Update_ProfileNum(ByVal strSeqNoType As String, ByVal strSchemeCode As String, ByVal udtDB As Database) As String
            Dim strPrefix As String = String.Empty
            Dim intRes As Integer = 0
            Dim dt As DataTable = New DataTable()

            Try
                Dim prams() As SqlParameter = { _
                    udtDB.MakeInParam("@Profile_ID", Profile_ID_DataType, Profile_ID_DataSize, strSeqNoType), _
                    udtDB.MakeInParam("@Scheme_Code", Scheme_Code_DataType, Scheme_Code_DataSize, strSchemeCode)}

                udtDB.RunProc("proc_SystemProfile_ProfilePrefix_get_byProfileIDSchemeCode", prams, dt)

                If dt.Rows.Count > 0 Then
                    strPrefix = dt.Rows(0)("Profile_Prefix").ToString()
                Else
                    Throw New Exception("Profile Not Found:" + strSeqNoType + "," + strSchemeCode)
                End If
            Catch eSQL As SqlException
                Throw
            Catch ex As Exception
                Throw
            End Try

            Return strPrefix

        End Function
        'CRE15-003 System-generated Form [End][Philip Chau]

        ''' <summary>
        ''' Retrieve SystemProfile Profile_Num + Profile_Prefix
        ''' </summary>
        ''' <param name="strSeqNoType"></param>
        ''' <param name="strSchemeCode"></param>
        ''' <param name="strPrefix">Output Prefix</param>
        ''' <param name="udtCustomDB">Output Database</param>
        ''' <returns>Profile_Num</returns>
        ''' <remarks></remarks>
        ''' Public Function getSeqNo_Prefix(ByVal strSeqNoType As String, ByVal strSchemeCode As String, ByRef strPrefix As String) As Integer
        Public Function getSeqNo_Prefix(ByVal strSeqNoType As String, ByVal strSchemeCode As String, ByRef strPrefix As String, Optional ByRef udtCustomDB As Database = Nothing) As Integer

            Dim intRes As Integer = 0
            Dim dt As DataTable = New DataTable()
            Dim udtDB As Database = New Database()

            Try
                udtDB.BeginTransaction()

                intRes = Me.getSeqNo_Prefix(strSeqNoType, strSchemeCode, strPrefix, udtDB, udtCustomDB)

                udtDB.CommitTransaction()
                Return intRes

            Catch eSQL As SqlException
                udtDB.RollBackTranscation()
                Throw
            Catch ex As Exception
                udtDB.RollBackTranscation()
                intRes = 0
                Throw
                Return intRes
            End Try
        End Function

        ''' <summary>
        ''' Retrieve SystemProfile Profile_Num + Profile_Prefix
        ''' </summary>
        ''' <param name="strSeqNoType"></param>
        ''' <param name="strSchemeCode"></param>
        ''' <param name="strPrefix">Output Prefix</param>
        ''' <param name="udtCustomDB">Output Database</param>
        ''' <returns>Profile_Num</returns>
        ''' <remarks></remarks>
        ''' Public Function getSeqNo_Prefix(ByVal strSeqNoType As String, ByVal strSchemeCode As String, ByRef strPrefix As String) As Integer
        Public Function getSeqNo_Prefix_ByYearMonth(ByVal strSeqNoType As String, ByVal strSchemeCode As String, ByVal intYear As Integer, ByVal intMonth As Integer, _
                                        ByRef strPrefix As String, Optional ByRef udtCustomDB As Database = Nothing) As Integer

            Dim intRes As Integer = 0
            Dim dt As DataTable = New DataTable()
            Dim udtDB As Database = New Database()

            Try
                udtDB.BeginTransaction()
                ' CRE19-022 Inspection Module [Start][Winnie]
                '-----------------------------------------------------------------------------------------
                'intRes = Me.getSeqNo_Prefix(strSeqNoType, strSchemeCode, strPrefix, udtDB, udtCustomDB)
                intRes = Me.getSeqNo_Prefix(strSeqNoType, strSchemeCode, strPrefix, udtDB, udtCustomDB, intYear, intMonth)
                ' CRE19-022 Inspection Module [End][Winnie]
                udtDB.CommitTransaction()
                Return intRes

            Catch eSQL As SqlException
                udtDB.RollBackTranscation()
                Throw
            Catch ex As Exception
                udtDB.RollBackTranscation()
                intRes = 0
                Throw
                Return intRes
            End Try
        End Function

        ''' <summary>
        ''' Retrieve SystemProfile Profile_Num + Profile_Prefix
        ''' </summary>
        ''' <param name="strSeqNoType"></param>
        ''' <param name="strSchemeCode"></param>
        ''' <param name="strPrefix">Output Prefix</param>
        ''' <param name="udtDefaultDB"></param>
        ''' <param name="udtCustomDB">Output Database</param>
        ''' <returns>Profile_Num</returns>
        ''' <remarks></remarks>
        Private Function getSeqNo_Prefix(ByVal strSeqNoType As String, ByVal strSchemeCode As String, ByRef strPrefix As String, ByVal udtDefaultDB As Database, Optional ByRef udtCustomDB As Database = Nothing, _
                                         Optional ByVal intYear As Integer = 0, Optional ByVal intMonth As Integer = 0) As Integer

            Dim intRes As Integer = 0
            Dim dt As DataTable = New DataTable()

            'CRE13-019-02 Extend HCVS to China [Start][Chris YIM]
            '-----------------------------------------------------------------------------------------
            Dim udtDB As Database
            If Not udtCustomDB Is Nothing Then
                udtDB = udtCustomDB
            Else
                udtDB = udtDefaultDB
            End If
            'CRE13-019-02 Extend HCVS to China [End][Chris YIM]

            Try

                ' CRE19-022 Inspection Module [Start][Winnie]
                Dim prams() As SqlParameter = { _
                    udtDB.MakeInParam("@Profile_ID", Profile_ID_DataType, Profile_ID_DataSize, strSeqNoType), _
                    udtDB.MakeInParam("@Profile_Year", Profile_Year_DataType, Profile_Year_DataSize, IIf(intYear = 0, DBNull.Value, intYear)), _
                    udtDB.MakeInParam("@Profile_Month", Profile_Month_DataType, Profile_Month_DataSize, IIf(intMonth = 0, DBNull.Value, intMonth)), _
                    udtDB.MakeInParam("@Scheme_Code", Scheme_Code_DataType, Scheme_Code_DataSize, strSchemeCode)}
                ' CRE19-022 Inspection Module [End][Winnie]

                udtDB.RunProc("proc_SystemProfile_get_byProfileID", prams, dt)

                If dt.Rows.Count > 0 Then
                    strPrefix = dt.Rows(0)("Profile_Prefix").ToString()
                    intRes = CInt(dt.Rows(0)("Profile_Num").ToString())
                Else
                    Throw New Exception("Profile Not Found:" + strSeqNoType + "," + strSchemeCode)
                End If
            Catch eSQL As SqlException
                Throw eSQL
            Catch ex As Exception
                Throw ex
            End Try

            Return intRes

        End Function

        ''' <summary>
        ''' Generate System Number by switch Profile Type
        ''' DB Prefix (if any) + Code Prefix (YYYY, M, DD) + "-" + Num
        ''' </summary>
        ''' <param name="strPrefix"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function generateSystemNum(ByVal strPrefix As String) As String

            Dim strRes As String = String.Empty
            Dim strProfileType As String = String.Empty
            Dim strDBPrefix As String = String.Empty

            Dim intNextNum As Integer

            Dim strPrefix_y, strPrefix_m, strPrefix_d As String
            Dim dtToday As DateTime = Me.GetSystemDateTime()

            Select Case strPrefix
                Case "T"
                    strProfileType = "TSN"
                Case "A"
                    strProfileType = "ERN"
                Case "C"
                    strProfileType = "VAN"
                Case "M", "V"
                    strProfileType = "TMN"
                    strPrefix = "V"
                Case "R"
                    strProfileType = "RMN"
                    strPrefix = ""
                Case "X"
                    strProfileType = "XVA"
                Case "I"
                    strProfileType = "IAID"
                Case Else
                    strProfileType = ""
            End Select

            intNextNum = Me.getSeqNo_Prefix(strProfileType, "", strDBPrefix)
            strPrefix_y = Right(dtToday.Year.ToString(), 2)
            strPrefix_m = dtToday.Month.ToString()
            strPrefix_d = dtToday.Day.ToString().PadLeft(2, "0")

            Select Case strPrefix_m
                Case "10"
                    strPrefix_m = "A"
                Case "11"
                    strPrefix_m = "B"
                Case "12"
                    strPrefix_m = "C"
            End Select

            strRes = strDBPrefix.Trim() + strPrefix_y + strPrefix_m + strPrefix_d + "-" + intNextNum.ToString()
            strRes = decodeNum(strRes)
            strRes = strRes + generateChkDgt(strRes)
            Return strRes

        End Function

        ''' <summary>
        ''' Generate File Sequence Number [Length:12] for Default SchemeCode = "ALL"
        ''' DB Prefix (if any) + Code Prefix (YY) + Num
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function generateFileSeqNo() As String
            Return Me.generateFileSeqNo("")
        End Function
        Private Function generateFileSeqNo(ByVal strMasterSchemeCode As String) As String
            Dim strPrefix As String = String.Empty
            Dim strTempNum As String = String.Empty

            Dim dtToday As DateTime = Me.GetSystemDateTime()
            Dim strPrefix_y As String = dtToday.Year.ToString.Substring(2, 2)
            Dim intNextNum As Integer = 0

            intNextNum = Me.getSeqNo_Prefix("FSN", strMasterSchemeCode, strPrefix)
            strPrefix_y = strPrefix.Trim() + strPrefix_y
            strTempNum = intNextNum.ToString().PadLeft(intMaxHPSeqNo - strPrefix_y.Length, "0")

            Return (strPrefix_y.Trim() + strTempNum)
        End Function

        ''' <summary>
        ''' Generate Bank In Number for Default MasterSchemeCode = "ALL"
        ''' DB Prefix(R) + Code Prefix (YYYY) + Num(Length:4) + Check Digit
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function generateBankInNo() As String
            Return Me.generateBankInNo("")
        End Function
        Private Function generateBankInNo(ByVal strMasterSchemeCode As String) As String

            Dim strRes As String = String.Empty
            Dim strPrefix As String = String.Empty
            Dim strPrefix_y As String = String.Empty
            Dim strNumtemp As String = String.Empty
            Dim intNextTranNum As Integer = 0
            Dim dtToday As DateTime = Me.GetSystemDateTime()

            strPrefix_y = dtToday.Year.ToString()
            intNextTranNum = Me.getSeqNo_Prefix("RMN", strMasterSchemeCode, strPrefix)
            strNumtemp = intNextTranNum.ToString().PadLeft(4, "0")
            strRes = strPrefix_y & strNumtemp
            strRes = strRes + generateChkDgt(strRes)
            Return (strPrefix.Trim() + strRes)
        End Function

        ''' <summary>
        ''' Generate Inbox Msg ID [Length:10] for Default SchemeCode = "ALL"
        ''' DB Prefix (if any) + Code Prefix (YY) + Num
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function generateInboxMsgID() As String
            Return Me.generateInboxMsgID("")
        End Function
        Private Function generateInboxMsgID(ByVal strMasterSchemeCode As String) As String

            Dim strPrefix As String = String.Empty
            Dim strTempNum As String = String.Empty

            Dim dtToday As DateTime = Me.GetSystemDateTime()
            Dim strPrefix_y As String = dtToday.Year.ToString.Substring(2, 2)
            Dim intNextNum As Integer = 0

            intNextNum = Me.getSeqNo_Prefix("IMN", strMasterSchemeCode, strPrefix)
            strPrefix_y = strPrefix.Trim() + strPrefix_y
            strTempNum = intNextNum.ToString().PadLeft(intMaxInboxIDLength - strPrefix_y.Length, "0")

            Return (strPrefix_y.Trim() + strTempNum)
        End Function

        'CRE13-019-02 Extend HCVS to China [Start][Chris YIM]
        '-----------------------------------------------------------------------------------------
        ''' <summary>
        ''' [CRE13-019-02] Extend HCVS to China
        ''' Generate the value of the Field - [ExchangeRate_ID] of the Table - [ExchangeRate] for ExchangeRate Creation
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GenerateExchangeRateID() As String
            Dim strRes As String = String.Empty
            Dim strDBPrefix As String = String.Empty
            Dim strProfileType As String = "CRID"
            Dim strSchemeCode As String = "ALL"
            'Dim dtToday As DateTime = Me.GetSystemDateTime()

            Dim intNextNum As Integer
            'Dim strPrefix_y, strPrefix_m, strPrefix_d As String

            intNextNum = Me.getSeqNo_Prefix(strProfileType, strSchemeCode, strDBPrefix)
            If intNextNum > 999999 Then
                Throw New Exception("Error: Class = [Common.ComFunction.GeneralFunction], Method = [GenerateSentOutMsgID], Message = The retrieved [Profile_Num] has exceeded its limit and the limit is 999")
            End If

            'strPrefix_y = Right(dtToday.Year.ToString(), 2)
            'strPrefix_m = dtToday.Month.ToString()
            'strPrefix_d = dtToday.Day.ToString().PadLeft(2, "0")

            'Select Case strPrefix_m
            '    Case "10"
            '        strPrefix_m = "A"
            '    Case "11"
            '        strPrefix_m = "B"
            '    Case "12"
            '        strPrefix_m = "C"
            'End Select

            'strRes = strDBPrefix.Trim() + strPrefix_y + strPrefix_m + strPrefix_d + intNextNum.ToString().PadLeft(3, "0")
            strRes = strDBPrefix.Trim() + intNextNum.ToString().PadLeft(6, "0")

            If strRes.Length <> 8 Then
                Throw New Exception("Error: Class = [Common.ComFunction.GeneralFunction], Method = [GenerateSentOutMsgID], Message = The number of characters of [SentOutMsgID] must be 10")
            End If

            Return strRes
        End Function
        'CRE13-019-02 Extend HCVS to China [End][Chris YIM]

        ' by James for Generate ID
        Public Function GenerateVoucherRefundRequestID() As String
            Dim strRes As String = String.Empty
            Dim strDBPrefix As String = String.Empty
            Dim strProfileType As String = "VRRID"
            Dim strSchemeCode As String = "ALL"

            Dim intNextNum As Integer

            intNextNum = Me.getSeqNo_Prefix(strProfileType, strSchemeCode, strDBPrefix)
            If intNextNum > 99999999 Then
                Throw New Exception("Error: Class = [Common.ComFunction.GeneralFunction], Method = [GenerateVoucherRefundRequestID], Message = The retrieved [Profile_Num] has exceeded its limit and the limit is 99999999")
            End If

            strRes = strDBPrefix.Trim() + intNextNum.ToString().PadLeft(8, "0")

            If strRes.Length <> 11 Then
                Throw New Exception("Error: Class = [Common.ComFunction.GeneralFunction], Method = [GenerateVoucherRefundRequestID], Message = The number of characters of [SentOutMsgID] must be 11")
            End If

            Return strRes
        End Function

        Public Function GenerateVoucherRefundID() As String
            Dim strRes As String = String.Empty
            Dim strDBPrefix As String = String.Empty
            Dim strProfileType As String = "VRID"
            Dim strSchemeCode As String = "ALL"

            Dim intNextNum As Integer

            intNextNum = Me.getSeqNo_Prefix(strProfileType, strSchemeCode, strDBPrefix)
            If intNextNum > 99999999 Then
                Throw New Exception("Error: Class = [Common.ComFunction.GeneralFunction], Method = [GenerateVoucherRefundID], Message = The retrieved [Profile_Num] has exceeded its limit and the limit is 99999999")
            End If

            strRes = strDBPrefix.Trim() + intNextNum.ToString().PadLeft(8, "0")

            If strRes.Length <> 10 Then
                Throw New Exception("Error: Class = [Common.ComFunction.GeneralFunction], Method = [GenerateVoucherRefundID], Message = The number of characters of [SentOutMsgID] must be 10")
            End If

            Return strRes
        End Function
        'CRE13-019-02 Extend HCVS to China [Start][Chris YIM]
        '-----------------------------------------------------------------------------------------
        ''' <summary>
        ''' [CRE13-019-02] Extend HCVS to China
        ''' Generate the value of the Field - [ExchangeRate_ID] of the Table - [ExchangeRate] for ExchangeRate Creation
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GenerateExchangeRateStagingID(ByRef udtDB As Database) As String
            Dim strRes As String = String.Empty
            Dim strDBPrefix As String = String.Empty
            Dim strProfileType As String = "CRSID"
            Dim strSchemeCode As String = "ALL"
            'Dim dtToday As DateTime = Me.GetSystemDateTime()

            Dim intNextNum As Integer
            'Dim strPrefix_y, strPrefix_m, strPrefix_d As String

            intNextNum = Me.getSeqNo_Prefix(strProfileType, strSchemeCode, strDBPrefix, udtDB, Nothing, Nothing, Nothing)
            If intNextNum > 999999 Then
                Throw New Exception("Error: Class = [Common.ComFunction.GeneralFunction], Method = [GenerateSentOutMsgID], Message = The retrieved [Profile_Num] has exceeded its limit and the limit is 999")
            End If

            'strPrefix_y = Right(dtToday.Year.ToString(), 2)
            'strPrefix_m = dtToday.Month.ToString()
            'strPrefix_d = dtToday.Day.ToString().PadLeft(2, "0")

            'Select Case strPrefix_m
            '    Case "10"
            '        strPrefix_m = "A"
            '    Case "11"
            '        strPrefix_m = "B"
            '    Case "12"
            '        strPrefix_m = "C"
            'End Select

            'strRes = strDBPrefix.Trim() + strPrefix_y + strPrefix_m + strPrefix_d + intNextNum.ToString().PadLeft(3, "0")
            strRes = strDBPrefix.Trim() + intNextNum.ToString().PadLeft(6, "0")

            If strRes.Length <> 9 Then
                Throw New Exception("Error: Class = [Common.ComFunction.GeneralFunction], Method = [GenerateSentOutMsgID], Message = The number of characters of [SentOutMsgID] must be 10")
            End If

            Return strRes
        End Function
        'CRE13-019-02 Extend HCVS to China [End][Chris YIM]

        ''' <summary>
        ''' [CRE12-012] Infrastructure on Sending Messages through eHealth System Inbox
        ''' Generate the value of the Field - [SOMS_SentOutMsg_ID] of the Table - [SentOutMsg_SOMS] for Sent Out Message Creation
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GenerateSentOutMsgID() As String
            Dim strRes As String = String.Empty
            Dim strDBPrefix As String = String.Empty
            Dim strProfileType As String = "SOM"
            Dim strSchemeCode As String = "ALL"
            Dim dtToday As DateTime = Me.GetSystemDateTime()

            Dim intNextNum As Integer
            Dim strPrefix_y, strPrefix_m, strPrefix_d As String

            intNextNum = Me.getSeqNo_Prefix(strProfileType, strSchemeCode, strDBPrefix)
            If intNextNum > 999 Then
                Throw New Exception("Error: Class = [Common.ComFunction.GeneralFunction], Method = [GenerateSentOutMsgID], Message = The retrieved [Profile_Num] has exceeded its limit and the limit is 999")
            End If

            strPrefix_y = Right(dtToday.Year.ToString(), 2)
            strPrefix_m = dtToday.Month.ToString()
            strPrefix_d = dtToday.Day.ToString().PadLeft(2, "0")

            Select Case strPrefix_m
                Case "10"
                    strPrefix_m = "A"
                Case "11"
                    strPrefix_m = "B"
                Case "12"
                    strPrefix_m = "C"
            End Select

            strRes = strDBPrefix.Trim() + strPrefix_y + strPrefix_m + strPrefix_d + intNextNum.ToString().PadLeft(3, "0")

            If strRes.Length <> 10 Then
                Throw New Exception("Error: Class = [Common.ComFunction.GeneralFunction], Method = [GenerateSentOutMsgID], Message = The number of characters of [SentOutMsgID] must be 10")
            End If

            Return strRes
        End Function

        ''' <summary>
        ''' Generate SPID for Default SchemeCode = "ALL"
        ''' DB Prefix (if any) + Num [Length:6] + Check Digit [Length:2] 
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function generateSPID() As String
            Return Me.generateSPID("")
        End Function
        Private Function generateSPID(ByVal strMasterSchemeCode As String) As String
            Dim strRes As String = String.Empty
            Dim intSPIDSeq As Integer = 0
            Dim strPrefix As String = String.Empty
            intSPIDSeq = Me.getSeqNo_Prefix("SPID", strMasterSchemeCode, strPrefix)
            strRes = intSPIDSeq.ToString.PadLeft(intMaxSPIDLength - 2, "0")

            strRes = strRes + generateChkDgt(strRes)
            strRes = strRes + generateChkDgt(strRes)

            Return strRes
        End Function

        ''' <summary>
        ''' Generate VRAcct ID for Default SchemeCode = "ALL"
        ''' DB Prefix (if any) + Num [Length:8]
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function generateValidatedVRAcctID() As String
            Return Me.generateValidatedVRAcctID("")
        End Function
        Private Function generateValidatedVRAcctID(ByVal strMasterSchemeCode As String) As String
            Dim strRes As String = String.Empty
            Dim strPrefix As String = String.Empty
            Dim intNextNum As Integer = 0
            intNextNum = Me.getSeqNo_Prefix("VAID", strMasterSchemeCode, strPrefix)
            strRes = strPrefix.Trim() + intNextNum.ToString().PadLeft(8, "0")
            Return strRes
        End Function

        ''' <summary>
        ''' CRE10-035
        ''' Generate eVaccination message ID for enquire CMS vaccination record
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function generateEVaccineMessageID() As String
            Dim strPrefix As String = String.Empty
            Dim strTempNum As String = String.Empty

            Dim dtToday As DateTime = Me.GetSystemDateTime()
            Dim strPrefix_y As String = dtToday.ToString("yyyyMMdd")
            Dim intNextNum As Integer = 0

            intNextNum = Me.getSeqNo_Prefix("EVACC", String.Empty, strPrefix)
            strPrefix_y = strPrefix.Trim() + strPrefix_y

            strTempNum = intNextNum.ToString().PadLeft(8, "0")

            Return (strPrefix_y.Trim() + strTempNum)
        End Function


        ' CRE12-001 eHS and PCD integration [Start][Tony Fung]
        ''' <summary>
        ''' CRE12-001
        ''' Generate PCD Web Service message ID
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function generatePCDWSMessageID() As String
            Dim strPrefix As String = String.Empty
            Dim strTempNum As String = String.Empty

            Dim dtToday As DateTime = Me.GetSystemDateTime()
            Dim strPrefix_y As String = dtToday.ToString("yyyyMMdd")
            Dim intNextNum As Integer = 0

            intNextNum = Me.getSeqNo_Prefix("PCDWS", "ALL", strPrefix)
            strPrefix_y = strPrefix.Trim() + strPrefix_y

            strTempNum = intNextNum.ToString().PadLeft(8, "0")
            Return (strPrefix_y.Trim() + strTempNum)

        End Function
        ' CRE12-001 eHS and PCD integration [End][Tony Fung]

        ''' <summary>
        ''' CRE11-018: Token Replacement
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GenerateTokenReplacementMessageID() As String
            Dim strPrefix As String = String.Empty
            Dim strTempNum As String = String.Empty

            Dim dtToday As DateTime = Me.GetSystemDateTime()
            Dim strPrefix_y As String = dtToday.ToString("yyyyMMdd")
            Dim intNextNum As Integer = 0

            intNextNum = Me.getSeqNo_Prefix("TOKENREPLA", String.Empty, strPrefix)
            strPrefix_y = strPrefix.Trim() + strPrefix_y

            strTempNum = intNextNum.ToString().PadLeft(8, "0")

            Return (strPrefix_y.Trim() + strTempNum)
        End Function

        ''' <summary>
        ''' CRE11-007: Death Record Matching
        ''' </summary>
        Public Function GenerateDeathRecordFileID() As String
            Dim strPrefix As String = String.Empty
            Dim strTempNum As String = String.Empty

            Dim dtToday As DateTime = Me.GetSystemDateTime()
            Dim strPrefix_y As String = dtToday.ToString("yyyyMMdd")
            Dim intNextNum As Integer = 0

            intNextNum = Me.getSeqNo_Prefix("DRFILEID", String.Empty, strPrefix)
            strPrefix_y = strPrefix.Trim() + strPrefix_y

            strTempNum = intNextNum.ToString.PadLeft(2, "0")

            Return (strPrefix_y.Trim() + strTempNum)

        End Function

        Public Function GenerateeHRIntegrationInterfaceQueueID() As String
            Dim strPrefix As String = String.Empty

            Dim intNextNum As Integer = getSeqNo_Prefix("EIIQID", String.Empty, strPrefix)

            Return String.Format("{0}{1}", strPrefix, intNextNum.ToString.PadLeft(12, "0"))

        End Function

        Public Function GenerateStudentFileID() As String
            Dim strPrefix As String = String.Empty
            Dim dtToday As DateTime = Me.GetSystemDateTime()
            Dim intNextNum As Integer = Me.getSeqNo_Prefix("STDFILEID", String.Empty, strPrefix)

            Return String.Format("{0}{1}-{2}", strPrefix.Trim, dtToday.ToString("yyyyMMdd"), intNextNum.ToString.PadLeft(3, "0"))

        End Function

        ' CRE19-022 Inspection Module [Start][Winnie]
        Public Function GenerateInspectionRecordID(ByRef udtDB As Database) As String
            Dim strRes As String = String.Empty
            Dim strDBPrefix As String = String.Empty
            Dim strProfileType As String = "INSID"
            Dim strSchemeCode As String = "ALL"

            Dim intNextNum As Integer

            intNextNum = Me.getSeqNo_Prefix(strProfileType, strSchemeCode, strDBPrefix, udtDB)
            If intNextNum > 999 Then
                Throw New Exception("Error: Class = [Common.ComFunction.GeneralFunction], Method = [GenerateInspectionRecordID], Message = The retrieved [Profile_Num] has exceeded its limit and the limit is 999")
            End If

            Dim dtToday As DateTime = Me.GetSystemDateTime()
            Dim strPrefix_y, strPrefix_m, strPrefix_d As String

            strPrefix_y = dtToday.Year.ToString()
            strPrefix_m = dtToday.Month.ToString().PadLeft(2, "0")
            strPrefix_d = dtToday.Day.ToString().PadLeft(2, "0")

            strRes = strDBPrefix.Trim() + strPrefix_y + strPrefix_m + strPrefix_d + intNextNum.ToString().PadLeft(3, "0")

            If strRes.Length <> 14 Then
                Throw New Exception("Error: Class = [Common.ComFunction.GeneralFunction], Method = [GenerateInspectionRecordID], Message = The number of characters of [InspectionID] must be 14")
            End If

            Return strRes
        End Function

        Public Function GenerateInspectionFileRefNo(ByVal strFileReferenceNo As String, ByRef udtDB As Database) As String
            Dim strRes As String = String.Empty
            Dim strDBPrefix As String = String.Empty
            Dim strSchemeCode As String = "ALL"

            Dim strFileRefNoPrefix As String = Me.getSeqNo_Prefix_Without_Update_ProfileNum("INS_TYPE_1", "ALL")
            Dim match = Regex.Match(strFileReferenceNo, strFileRefNoPrefix & "(\d+)/(\d+)-(\d+)", RegexOptions.IgnoreCase)
            Dim strType As String = match.Groups(1).Value
            Dim strYear As String = match.Groups(2).Value
            Dim strMonth As String = match.Groups(3).Value

            Dim intYear As Integer = 2000 + CInt(strYear)
            Dim intMonth As Integer = CInt(strMonth)
            Dim strProfileType As String = String.Format("INS_TYPE_{0}", strType)
            Dim intNextNum As Integer

            intNextNum = Me.getSeqNo_Prefix_ByYearMonth(strProfileType, strSchemeCode, intYear, intMonth, strDBPrefix, udtDB)
            If intNextNum > 999 Then
                Throw New Exception("Error: Class = [Common.ComFunction.GeneralFunction], Method = [GenerateInspectionFileRefNo], Message = The retrieved [Profile_Num] has exceeded its limit and the limit is 999")
            End If

            strRes = String.Format("{0}{1}/{2}-{3}-{4}", strDBPrefix.Trim(), strType, strYear, strMonth, intNextNum.ToString.PadLeft(3, "0"))

            If strRes.Length <> 24 Then
                Throw New Exception("Error: Class = [Common.ComFunction.GeneralFunction], Method = [GenerateInspectionFileRefNo], Message = The number of characters of [FileRefNo] must be 24")
            End If

            Return strRes
        End Function
        ' CRE19-022 Inspection Module [End][Winnie]


        'CRE20-022 Immue Record (Phase 3) Vaccine Lot management[Start][Nichole]
        Public Function GenerateVaccineLotMappingID() As String
            Dim strPrefix As String = String.Empty

            Dim intNextNum As Integer = getSeqNo_Prefix("VLM", String.Empty, strPrefix)

            Return String.Format("{0}{1}", strPrefix, intNextNum.ToString.PadLeft(7, "0"))

        End Function
        'CRE20-022 Immue Record (Phase 3) Vaccine Lot management[End][Nichole]
#End Region

#Region "Transaction Number (By SchemeCode)"

        'CRE15-003 System-generated Form [Start][Philip Chau]
        Public Function generateTemporaryTransactionNumber(ByVal strSchemeCode As String, Optional ByVal blnManualReimburse As Boolean = False) As String

            ' CRE20-0022 (Immu record) [Start][Chris YIM]
            ' ---------------------------------------------------------------------------------------------------------
            'Overrides the scheme code to get the specific profile no.
            Select Case strSchemeCode.Trim.ToUpper()
                Case Common.Component.Scheme.SchemeClaimModel.COVID19CVC, _
                     Common.Component.Scheme.SchemeClaimModel.COVID19CBD, _
                     Common.Component.Scheme.SchemeClaimModel.COVID19RVP, _
                     Common.Component.Scheme.SchemeClaimModel.COVID19DH, _
                     Common.Component.Scheme.SchemeClaimModel.CIVSS

                    strSchemeCode = Common.Component.Scheme.SchemeClaimModel.COVID19CVC

                Case Else
                    'Nothing to do
            End Select
            ' CRE20-0022 (Immu record) [End][Chris YIM]

            Dim strRes As String = String.Empty
            Dim strDBPrefix As String = String.Empty
            Dim strProfileType As String = String.Empty

            Dim strPrefix_y, strPrefix_m, strPrefix_d As String
            Dim dtToday As DateTime = Me.GetSystemDateTime()


            If blnManualReimburse Then
                strProfileType = "BTSN"
            Else
                strProfileType = "TSN"
            End If

            strDBPrefix = Me.getSeqNo_Prefix_Without_Update_ProfileNum(strProfileType, strSchemeCode.Trim())
            strPrefix_y = Right(dtToday.Year.ToString(), 2)
            strPrefix_m = dtToday.Month.ToString()
            strPrefix_d = dtToday.Day.ToString().PadLeft(2, "0")

            Select Case strPrefix_m
                Case "10"
                    strPrefix_m = "A"
                Case "11"
                    strPrefix_m = "B"
                Case "12"
                    strPrefix_m = "C"
            End Select
            strRes = strDBPrefix.Trim() + strPrefix_y + strPrefix_m + strPrefix_d + "-"

            Return strRes
        End Function
        'CRE15-003 System-generated Form [End][Philip Chau]

        Public Function generateTransactionNumber(ByVal strSchemeCode As String, Optional ByVal blnManualReimburse As Boolean = False) As String

            ' CRE20-0022 (Immu record) [Start][Chris YIM]
            ' ---------------------------------------------------------------------------------------------------------
            'Overrides the scheme code to get the specific profile no.
            Select Case strSchemeCode.Trim.ToUpper()
                Case Common.Component.Scheme.SchemeClaimModel.COVID19CVC, _
                     Common.Component.Scheme.SchemeClaimModel.COVID19CBD, _
                     Common.Component.Scheme.SchemeClaimModel.COVID19RVP, _
                     Common.Component.Scheme.SchemeClaimModel.COVID19DH, _
                     Common.Component.Scheme.SchemeClaimModel.CIVSS

                    strSchemeCode = Common.Component.Scheme.SchemeClaimModel.COVID19CVC

                Case Else
                    'Nothing to do
            End Select
            ' CRE20-0022 (Immu record) [End][Chris YIM]

            Dim strRes As String = String.Empty
            Dim strDBPrefix As String = String.Empty

            Dim strProfileType As String

            If blnManualReimburse Then
                strProfileType = "BTSN"
            Else
                strProfileType = "TSN"
            End If
            Dim intNextNum As Integer

            Dim strPrefix_y, strPrefix_m, strPrefix_d As String
            Dim dtToday As DateTime = Me.GetSystemDateTime()

            intNextNum = Me.getSeqNo_Prefix(strProfileType, strSchemeCode.Trim(), strDBPrefix)
            strPrefix_y = Right(dtToday.Year.ToString(), 2)
            strPrefix_m = dtToday.Month.ToString()
            strPrefix_d = dtToday.Day.ToString().PadLeft(2, "0")

            Select Case strPrefix_m
                Case "10"
                    strPrefix_m = "A"
                Case "11"
                    strPrefix_m = "B"
                Case "12"
                    strPrefix_m = "C"
            End Select

            strRes = strDBPrefix.Trim() + strPrefix_y + strPrefix_m + strPrefix_d + "-" + intNextNum.ToString()
            strRes = decodeTranNum(strRes)
            strRes = strRes + generateChkDgt(strRes)
            Return strRes

        End Function

        Public Function decodeTranNum(ByVal strOriNum As String) As String

            Dim strRes, strTemp As String
            Dim strPrefix, strNumGen, strChkdgt, strNumtemp As String
            Dim intTranNumLen As Integer = 8
            Dim i As Integer

            If strOriNum.IndexOf("-") > -1 Then

                Dim intSeparatorIndex As Integer = strOriNum.IndexOf("-")

                strPrefix = ""
                strNumGen = ""
                strChkdgt = ""
                strTemp = ""
                strNumtemp = ""
                strRes = ""
                strPrefix = strOriNum.Substring(0, intSeparatorIndex)
                'strPrefix = strOriNum.Substring(0, 6)
                strTemp = strOriNum.Substring(intSeparatorIndex + 1)
                'strTemp = strOriNum.Substring(7)
                strNumGen = strTemp
                For i = 1 To intTranNumLen - strNumGen.Length()
                    strNumtemp = strNumtemp + "0"
                Next
                strRes = strPrefix + strNumtemp + strNumGen
            Else
                strRes = strOriNum
            End If
            Return strRes

        End Function
#End Region

#Region "Browser Token"
        Public Shared Function generateBrowserTokenNum() As String
            Dim intMin As Integer = 14
            Dim intMax As Integer = 18
            Dim rand As New Random()
            Dim Builder As StringBuilder = New StringBuilder()
            'Dim intCodeLength, i, j As Integer
            Dim intCodeLength = rand.Next(intMin, intMax)

            For j As Integer = 0 To intCodeLength - 1
                Dim i = rand.Next(0, 2)
                If i = 0 Then
                    Builder.Append(rand.Next(0, 10))
                Else
                    Builder.Append(Convert.ToChar((rand.Next(0, 26) + 65)))
                End If
            Next
            Return Builder.ToString().Trim()
        End Function

#End Region

#Region "Check Specific SystemParameters"

        ' CRE16-019 (To implement token sharing between eHS(S) and eHRSS) [Start][Winnie]
        Public Function CheckEnableEHRSSinHCSP() As EnumTurnOnStatus
            Dim strParmValue1 As String = String.Empty

            Dim udtGeneralFunction As New GeneralFunction
            udtGeneralFunction.getSystemParameter("eHRSS_EnableHCSPFunction", strParmValue1, String.Empty)

            Select Case strParmValue1.Trim
                Case "Y"
                    Return EnumTurnOnStatus.Yes
                Case "N", String.Empty
                    Return EnumTurnOnStatus.No
                Case Else
                    Dim strException As String = String.Format("GeneralFunction.eHRSS_EnableHCSPFunction: Unrecognizied Parm_Value1 {0} from system parameters Enable_Get_eHRSS_Username", strParmValue1.Trim)
                    Throw New Exception(strException)
            End Select

            Return Nothing

        End Function
        ' CRE16-019 (To implement token sharing between eHS(S) and eHRSS) [End][Winnie]

        ' ===== CRE10-027: Means of Input =====
        Public Function CheckTurnOnMeansOfInput() As EnumTurnOnStatus
            Dim strParmValue1 As String = String.Empty

            Dim udtGeneralFunction As New GeneralFunction
            udtGeneralFunction.getSystemParameter("TurnOnMeansOfInput", strParmValue1, String.Empty)

            Select Case strParmValue1.Trim
                Case "Y"
                    Return EnumTurnOnStatus.Yes
                Case "N", String.Empty
                    Return EnumTurnOnStatus.No
                Case Else
                    Dim strException As String = String.Format("GeneralFunction.CheckTurnOnMeansOfInput: Unrecognizied Parm_Value1 {0} from system parameters TurnOnMeansOfInput", strParmValue1.Trim)
                    Throw New Exception(strException)
            End Select

            Return Nothing

        End Function
        ' ===== End of CRE10-027 =====

        ' ===== INT11-0003: Hyperlink to eHealth Account =====
        Public Function CheckTurnOnHyperlinkToEHealthAccount() As EnumTurnOnStatus
            Dim strParmValue1 As String = String.Empty

            Dim udtGeneralFunction As New GeneralFunction
            udtGeneralFunction.getSystemParameter("TurnOnHyperlinkToEHealthAccount", strParmValue1, String.Empty)

            Select Case strParmValue1.Trim
                Case "Y"
                    Return EnumTurnOnStatus.Yes
                Case "N", String.Empty
                    Return EnumTurnOnStatus.No
                Case Else
                    Dim strException As String = String.Format("GeneralFunction.CheckTurnOnHyperlinkToEHealthAccount: Unrecognizied Parm_Value1 {0} from system parameters TurnOnHyperlinkToEHealthAccount", strParmValue1.Trim)
                    Throw New Exception(strException)
            End Select

            Return Nothing

        End Function
        ' ===== End of INT11-0003 =====

        Public Function CheckTurnOnInstantUnmaskIdentityDocumentNo() As EnumTurnOnStatus
            Dim strParmValue1 As String = String.Empty

            Dim udtGeneralFunction As New GeneralFunction
            udtGeneralFunction.getSystemParameter("TurnOnInstantUnmaskIdentityDocumentNo", strParmValue1, String.Empty)

            Select Case strParmValue1.Trim
                Case "Y"
                    Return EnumTurnOnStatus.Yes
                Case "N", String.Empty
                    Return EnumTurnOnStatus.No
                Case Else
                    Dim strException As String = String.Format("GeneralFunction.CheckTurnOnInstantUnmaskIdentityDocumentNo: Unrecognizied Parm_Value1 {0} from system parameters TurnOnInstantUnmaskIdentityDocumentNo", strParmValue1.Trim)
                    Throw New Exception(strException)
            End Select

            Return Nothing

        End Function

        Public Function CheckEnableToken() As EnumTurnOnStatus
            Dim strParmValue1 As String = String.Empty

            Dim udtGeneralFunction As New GeneralFunction
            udtGeneralFunction.getSystemParameter("EnableToken", strParmValue1, String.Empty)

            Select Case strParmValue1.Trim
                Case "Y"
                    Return EnumTurnOnStatus.Yes
                Case "N", String.Empty
                    Return EnumTurnOnStatus.No
                Case Else
                    Dim strException As String = String.Format("GeneralFunction.CheckEnableToken: Unrecognizied Parm_Value1 {0} from system parameters EnableToken", strParmValue1.Trim)
                    Throw New Exception(strException)
            End Select

            Return Nothing

        End Function

        '

        Public Function GetMaxRowRetrieve() As Integer
            Dim strParmValue1 As String = String.Empty
            getSystemParameter("MaxRowRetrieve", strParmValue1, String.Empty)
            Return CInt(strParmValue1.Trim)
        End Function

        ''' <summary>
        ''' CRE11-007
        ''' Get gridview page size
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetPageSize() As Integer
            Dim strParmValue1 As String = String.Empty
            getSystemParameter("PageSize", strParmValue1, String.Empty)
            Return CInt(strParmValue1.Trim)
        End Function

        ''' <summary>
        ''' CRE11-007
        ''' Get gridview page size of HCSP
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetPageSizeHCSP() As Integer
            Dim strParmValue1 As String = String.Empty
            getSystemParameter("PageSize_HCSP", strParmValue1, String.Empty)
            Return CInt(strParmValue1.Trim)
        End Function

        ''' <summary>
        ''' CRE11-007
        ''' Get gridview page size of HCVU
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetPageSizeHCVU() As Integer
            Dim strParmValue1 As String = String.Empty
            getSystemParameter("PageSize_HCVU", strParmValue1, String.Empty)
            Return CInt(strParmValue1.Trim)
        End Function

        ' CRE11-024-02 HCVS Pilot Extension Part 2 [Start][Koala]
        ' -----------------------------------------------------------------------------------------
        ''' <summary>
        ''' Get Co-Payment and multiple reason for visit start datetime
        ''' </summary>
        ''' <returns>Co-Payment and multiple reason for visit start datetime</returns>
        ''' <remarks></remarks>
        Public Function GetCoPaymentFeeStartDate() As DateTime
            Dim strParmValue1 As String = String.Empty
            getSystemParameter("HCVSPilotExtCapCoPaymentFeeStartDate", strParmValue1, String.Empty, Common.Component.Scheme.SchemeClaimModel.HCVS)

            Return Date.Parse(strParmValue1)
        End Function

        ''' <summary>
        ''' Check Co-Payment and multiple reason for visit enable status
        ''' </summary>
        ''' <param name="dtmServiceDate">Check enable status by service date</param>
        ''' <returns>True, if Co-Payment and multiple reason for visit enabled; Otherwise false </returns>
        ''' <remarks></remarks>
        Public Function IsCoPaymentFeeEnabled(ByVal dtmServiceDate As Nullable(Of DateTime)) As Boolean
            Dim dtmStart As Nullable(Of DateTime) = GetCoPaymentFeeStartDate()
            Return IsWithinPeriod(dtmServiceDate, dtmStart, Nothing)
        End Function

        ''' <summary>
        ''' Get Co-Payment Fee lower and upper limit
        ''' </summary>
        ''' <param name="iLowerLimit">Return lower limit by reference</param>
        ''' <param name="iUpperLimit">Return upper limit by reference</param>
        ''' <remarks></remarks>
        Public Sub GetCoPaymentFee(ByRef iLowerLimit As Integer, ByRef iUpperLimit As Integer)
            Dim strParmValue1 As String = String.Empty
            Dim strParmValue2 As String = String.Empty
            getSystemParameter("HCVSPilotExtCoPaymentFeeLimit", strParmValue1, strParmValue2, Common.Component.Scheme.SchemeClaimModel.HCVS)

            iLowerLimit = Integer.Parse(strParmValue1)
            iUpperLimit = Integer.Parse(strParmValue2)
        End Sub

        ''' <summary>
        ''' Co-Payment Fee Validation, Integer, lower and upper limit checking
        ''' </summary>
        ''' <param name="strCoPaymentFee">The Co-Payment Fee value will be validated</param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function CheckCoPaymentFee(ByVal strCoPaymentFee As String) As Boolean
            Dim iLowerLimit As Integer
            Dim iUpperLimit As Integer

            GetCoPaymentFee(iLowerLimit, iUpperLimit)

            Dim iValue As Integer
            If Not Integer.TryParse(strCoPaymentFee, iValue) Then Return False

            Return iLowerLimit <= iValue AndAlso iValue <= iUpperLimit
        End Function

        'CRE13-019 China Voucher [Start][Karl]
        ''' <summary>
        ''' Co-Payment Fee Validation, Integer, lower and upper limit checking
        ''' </summary>
        ''' <param name="strCoPaymentFee">The Co-Payment Fee value will be validated</param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function CheckCoPaymentFeeDecimal(ByVal strCoPaymentFee As String) As Boolean
            Dim iLowerLimit As Integer
            Dim iUpperLimit As Integer

            GetCoPaymentFee(iLowerLimit, iUpperLimit)

            Dim dblValue As Decimal
            If Not Decimal.TryParse(strCoPaymentFee, dblValue) Then Return False

            Return CDec(iLowerLimit) <= dblValue AndAlso dblValue <= CDec(iUpperLimit)
        End Function
        'CRE13-019 China Voucher [End][Karl]

        ''' <summary>
        ''' Get Timeout Reminder display time before session timeout (Second) 
        ''' </summary>
        ''' <returns>Display Time(Second); If time is Zero then disable reminder</returns>
        ''' <remarks></remarks>
        Public Function GetTimeoutReminderDisplayTime() As Integer
            Dim strParmValue1 As String = String.Empty
            Dim strParmValue2 As String = String.Empty
            getSystemParameter("TimeoutReminderDisplayTime", strParmValue1, strParmValue2)

            If strParmValue1.Trim = String.Empty Then
                ' Zero display time if no value
                strParmValue1 = 0
            End If

            Return strParmValue1
        End Function
        ' CRE11-024-02 HCVS Pilot Extension Part 2 [End][Koala]

        ' CRE19-006 (DHC) [Start][Winnie]
        ' ----------------------------------------------------------------------------------------
        Public Function IsDHCServiceEffective(ByVal dtmServiceDate As Date) As Boolean
            Dim udtGeneralFunction As New Common.ComFunction.GeneralFunction
            Dim strMinDate As String = String.Empty
            Dim dtmMinDate As Date

            'DHC Service Min Date = date back claim min date of Scheme HCVSDHC
            udtGeneralFunction.getSystemParameter("DateBackClaimMinDate", strMinDate, String.Empty, Component.Scheme.SchemeClaimModel.HCVSDHC)
            dtmMinDate = Convert.ToDateTime(strMinDate)

            If dtmServiceDate.Date < dtmMinDate.Date Then
                Return False
            Else
                Return True
            End If
        End Function
        ' CRE19-006 (DHC) [End][Winnie]

#End Region

#Region "SystemVariable"

        Public Function GetSystemVariable(strVariableID As String, Optional udtDB As Database = Nothing) As DataTable
            If IsNothing(udtDB) Then udtDB = New Database

            Dim prams() As SqlParameter = { _
                udtDB.MakeInParam("@Variable_ID", SqlDbType.VarChar, 50, strVariableID)
            }

            Dim dt As New DataTable

            udtDB.RunProc("proc_SystemVariable_get", prams, dt)

            Return dt

        End Function

        Public Function GetSystemVariableValue(strVariableID As String, Optional udtDB As Database = Nothing) As String
            If IsNothing(udtDB) Then udtDB = New Database

            Dim dt As DataTable = GetSystemVariable(strVariableID, udtDB)

            If dt.Rows.Count <> 1 Then
                Throw New Exception(String.Format("GeneralFunction.GetSystemVariableValue: Unexpected value (dt.Rows.Count={0},strVariableID={1})", dt.Rows.Count, strVariableID))
            End If

            Dim dr As DataRow = dt.Rows(0)

            If Not IsDBNull(dr("Variable_Value")) Then
                Return dr("Variable_Value").ToString

            End If

            Return String.Empty

        End Function

        Public Sub UpdateSystemVariable(strVariableID As String, strVariableValue As String, strUpdateBy As String, bytTSMP As Byte(), _
                                        Optional udtDB As Database = Nothing)
            If IsNothing(udtDB) Then udtDB = New Database

            Dim prams() As SqlParameter = { _
                udtDB.MakeInParam("@Variable_ID", SqlDbType.VarChar, 50, strVariableID), _
                udtDB.MakeInParam("@Variable_Value", SqlDbType.NVarChar, 500, strVariableValue), _
                udtDB.MakeInParam("@Update_By", SqlDbType.VarChar, 20, strUpdateBy), _
                udtDB.MakeInParam("@TSMP", SqlDbType.Binary, 8, IIf(IsNothing(bytTSMP), DBNull.Value, bytTSMP)) _
            }

            udtDB.RunProc("dbo.proc_SystemVariable_upd", prams)

        End Sub

#End Region

#Region "Handle chinese characters with UTF32"

        ' I-CRE19-002 (To handle special characters in HA_MingLiu) [Start][Winnie]    
        ' ------------------------------------------------------------------------

        ''' <summary>
        ''' This function can return "true" word count as each character in UTF32 is fixed to 4 bytes
        ''' Can replace .net function "Length" which return will "2" for a UTF32 character
        ''' </summary>
        ''' <param name="strInput"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function UTF32_Length(ByVal strInput As String)
            Return Encoding.UTF32.GetByteCount(strInput) / 4
        End Function

        ''' <summary>
        ''' This function can retrieve substring
        ''' Can replace .net function "SubString" which cannot handle UTF32 character
        ''' </summary>
        ''' <param name="strInput"></param>
        ''' <param name="intStartIndex"></param>
        ''' <param name="intLength"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function UTF32_SubString(ByVal strInput As String, ByVal intStartIndex As Integer, ByVal intLength As Integer)
            Dim byte32Array As Byte() = Encoding.UTF32.GetBytes(strInput)
            ' In UTF32, 1 char = 4 bytes
            intStartIndex *= 4
            intLength *= 4

            If (intStartIndex >= byte32Array.Length) Then
                Return ""
            End If

            If (intStartIndex + intLength) > byte32Array.Length Then
                intLength = byte32Array.Length - intStartIndex
            End If

            Return Encoding.UTF32.GetString(byte32Array, intStartIndex, intLength)
        End Function
        ' I-CRE19-002 (To handle special characters in HA_MingLiu) [End][Winnie]

        ' I-CRE20-001 (Mid term solution to handle special characters in HA_MingLiu) [Start][Winnie]
        ''' <summary>
        ''' Replace the character to another character which supported by HA_MingLiu
        ''' </summary>
        ''' <param name="strInput"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Shared Function ReplaceString_HAMingLiu(ByVal strInput As String) As String
            Dim udtCodeBLL As New Component.CCCode.CCCodeBLL
            Dim udtGeneralFunction As New GeneralFunction
            Dim strOutput As String = String.Empty

            Dim udtCodeMapList As CodeMappingCollection
            Dim listSystem As List(Of CodeMappingModel) = Nothing

            strOutput = strInput

            If Not strInput Is Nothing AndAlso Not strInput.Equals(String.Empty) Then

                ' Retrieve Unicode mapping table
                udtCodeMapList = CodeMappingBLL.GetAllCodeMapping
                listSystem = udtCodeMapList.GetListByCodeType(CodeMappingModel.EnumSourceSystem.EHS, CodeMappingModel.EnumTargetSystem.EHS, EnumMappingCodeType.FONT_Unicode_Mingliu_to_HAMingliu.ToString())

                If listSystem IsNot Nothing Then
                    ' Replace character that can display by HA_MingLiu font
                    For Each udtCodeMap As CodeMappingModel In listSystem
                        strOutput = strOutput.Replace(udtCodeBLL.ConvertUnicode2Big5(udtCodeMap.CodeSource), udtCodeBLL.ConvertUnicode2Big5(udtCodeMap.CodeTarget))
                    Next

                End If
            End If

            Return strOutput
        End Function
        ' I-CRE20-001 (Mid term solution to handle special characters in HA_MingLiu) [End][Winnie]

#End Region

    End Class
End Namespace