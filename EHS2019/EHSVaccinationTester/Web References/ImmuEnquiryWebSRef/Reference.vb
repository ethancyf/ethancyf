'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34209
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.34209.
'
Namespace ImmuEnquiryWebSRef
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="ImmuEnquiryWebServiceSoapHttp", [Namespace]:="http://immu_ws.immu.biz/")>  _
    Partial Public Class ImmuEnquiryWebS
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private getCmsVaccinationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getEhsVaccinationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getVersionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.EHSVaccinationTester.My.MySettings.Default.EHSVaccinationTester_ImmuEnquiryWebSRef_ImmuEnquiryWebS
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event getCmsVaccinationCompleted As getCmsVaccinationCompletedEventHandler
        
        '''<remarks/>
        Public Event getEhsVaccinationCompleted As getEhsVaccinationCompletedEventHandler
        
        '''<remarks/>
        Public Event getVersionCompleted As getVersionCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace:="http://immu_ws.immu.biz/", ResponseNamespace:="http://immu_ws.immu.biz/")>  _
        Public Function getCmsVaccination(ByVal inputParm As String) As <System.Xml.Serialization.SoapElementAttribute("cmsVaccinationResult")> String
            Dim results() As Object = Me.Invoke("getCmsVaccination", New Object() {inputParm})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCmsVaccinationAsync(ByVal inputParm As String)
            Me.getCmsVaccinationAsync(inputParm, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCmsVaccinationAsync(ByVal inputParm As String, ByVal userState As Object)
            If (Me.getCmsVaccinationOperationCompleted Is Nothing) Then
                Me.getCmsVaccinationOperationCompleted = AddressOf Me.OngetCmsVaccinationOperationCompleted
            End If
            Me.InvokeAsync("getCmsVaccination", New Object() {inputParm}, Me.getCmsVaccinationOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCmsVaccinationOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCmsVaccinationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCmsVaccinationCompleted(Me, New getCmsVaccinationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace:="http://immu_ws.immu.biz/", ResponseNamespace:="http://immu_ws.immu.biz/")>  _
        Public Function getEhsVaccination(ByVal inputParm As String, ByVal hashCode As String) As <System.Xml.Serialization.SoapElementAttribute("ehsVaccinationResult")> String
            Dim results() As Object = Me.Invoke("getEhsVaccination", New Object() {inputParm, hashCode})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getEhsVaccinationAsync(ByVal inputParm As String, ByVal hashCode As String)
            Me.getEhsVaccinationAsync(inputParm, hashCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getEhsVaccinationAsync(ByVal inputParm As String, ByVal hashCode As String, ByVal userState As Object)
            If (Me.getEhsVaccinationOperationCompleted Is Nothing) Then
                Me.getEhsVaccinationOperationCompleted = AddressOf Me.OngetEhsVaccinationOperationCompleted
            End If
            Me.InvokeAsync("getEhsVaccination", New Object() {inputParm, hashCode}, Me.getEhsVaccinationOperationCompleted, userState)
        End Sub
        
        Private Sub OngetEhsVaccinationOperationCompleted(ByVal arg As Object)
            If (Not (Me.getEhsVaccinationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getEhsVaccinationCompleted(Me, New getEhsVaccinationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace:="http://immu_ws.immu.biz/", ResponseNamespace:="http://immu_ws.immu.biz/")>  _
        Public Function getVersion() As <System.Xml.Serialization.SoapElementAttribute("versionResult")> String
            Dim results() As Object = Me.Invoke("getVersion", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getVersionAsync()
            Me.getVersionAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getVersionAsync(ByVal userState As Object)
            If (Me.getVersionOperationCompleted Is Nothing) Then
                Me.getVersionOperationCompleted = AddressOf Me.OngetVersionOperationCompleted
            End If
            Me.InvokeAsync("getVersion", New Object(-1) {}, Me.getVersionOperationCompleted, userState)
        End Sub
        
        Private Sub OngetVersionOperationCompleted(ByVal arg As Object)
            If (Not (Me.getVersionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getVersionCompleted(Me, New getVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub getCmsVaccinationCompletedEventHandler(ByVal sender As Object, ByVal e As getCmsVaccinationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCmsVaccinationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub getEhsVaccinationCompletedEventHandler(ByVal sender As Object, ByVal e As getEhsVaccinationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getEhsVaccinationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub getVersionCompletedEventHandler(ByVal sender As Object, ByVal e As getVersionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getVersionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
