'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.239
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by wsdl, Version=4.0.30319.1.
'
Namespace ProxyClass

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.Web.Services.WebServiceBindingAttribute(Name:="PcdForEhsWSSoap", [Namespace]:="http://tempuri.org/")> _
    Partial Public Class PcdForEhsWS
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol

        Private serviceAuthHeaderValueField As ServiceAuthHeader

        Private UploadEnrolInfoOperationCompleted As System.Threading.SendOrPostCallback

        Private CreatePCDSPAcctOperationCompleted As System.Threading.SendOrPostCallback

        Private TransferPracticeInfoOperationCompleted As System.Threading.SendOrPostCallback

        Private CheckIsActiveSPOperationCompleted As System.Threading.SendOrPostCallback

        Private HealthCheckOperationCompleted As System.Threading.SendOrPostCallback

        Private UploadVerifiedEnrolmentOperationCompleted As System.Threading.SendOrPostCallback

        Private CheckAvailableForVerifiedEnrolmentOperationCompleted As System.Threading.SendOrPostCallback

        Private CheckAccountStatusOperationCompleted As System.Threading.SendOrPostCallback

        '''<remarks/>
        Public Sub New()
            MyBase.New()
            Me.Url = "http://localhost/PCD.IntegrationWS/PcdForEhsWS.asmx"
        End Sub

        Public Property ServiceAuthHeaderValue() As ServiceAuthHeader
            Get
                Return Me.serviceAuthHeaderValueField
            End Get
            Set(value As ServiceAuthHeader)
                Me.serviceAuthHeaderValueField = value
            End Set
        End Property

        '''<remarks/>
        Public Event UploadEnrolInfoCompleted As UploadEnrolInfoCompletedEventHandler

        '''<remarks/>
        Public Event CreatePCDSPAcctCompleted As CreatePCDSPAcctCompletedEventHandler

        '''<remarks/>
        Public Event TransferPracticeInfoCompleted As TransferPracticeInfoCompletedEventHandler

        '''<remarks/>
        Public Event CheckIsActiveSPCompleted As CheckIsActiveSPCompletedEventHandler

        '''<remarks/>
        Public Event HealthCheckCompleted As HealthCheckCompletedEventHandler

        '''<remarks/>
        Public Event UploadVerifiedEnrolmentCompleted As UploadVerifiedEnrolmentCompletedEventHandler

        '''<remarks/>
        Public Event CheckAvailableForVerifiedEnrolmentCompleted As CheckAvailableForVerifiedEnrolmentCompletedEventHandler

        '''<remarks/>
        Public Event CheckAccountStatusCompleted As CheckAccountStatusCompletedEventHandler

        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ServiceAuthHeaderValue"), _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadEnrolInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function UploadEnrolInfo(ByVal strXmlRequest As String, ByVal strRequestSystem As String) As String
            Dim results() As Object = Me.Invoke("UploadEnrolInfo", New Object() {strXmlRequest, strRequestSystem})
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Function BeginUploadEnrolInfo(ByVal strXmlRequest As String, ByVal strRequestSystem As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UploadEnrolInfo", New Object() {strXmlRequest, strRequestSystem}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndUploadEnrolInfo(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Overloads Sub UploadEnrolInfoAsync(ByVal strXmlRequest As String, ByVal strRequestSystem As String)
            Me.UploadEnrolInfoAsync(strXmlRequest, strRequestSystem, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub UploadEnrolInfoAsync(ByVal strXmlRequest As String, ByVal strRequestSystem As String, ByVal userState As Object)
            If (Me.UploadEnrolInfoOperationCompleted Is Nothing) Then
                Me.UploadEnrolInfoOperationCompleted = AddressOf Me.OnUploadEnrolInfoOperationCompleted
            End If
            Me.InvokeAsync("UploadEnrolInfo", New Object() {strXmlRequest, strRequestSystem}, Me.UploadEnrolInfoOperationCompleted, userState)
        End Sub

        Private Sub OnUploadEnrolInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadEnrolInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadEnrolInfoCompleted(Me, New UploadEnrolInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ServiceAuthHeaderValue"), _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreatePCDSPAcct", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function CreatePCDSPAcct(ByVal strXmlRequest As String, ByVal strRequestSystem As String) As String
            Dim results() As Object = Me.Invoke("CreatePCDSPAcct", New Object() {strXmlRequest, strRequestSystem})
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Function BeginCreatePCDSPAcct(ByVal strXmlRequest As String, ByVal strRequestSystem As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CreatePCDSPAcct", New Object() {strXmlRequest, strRequestSystem}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndCreatePCDSPAcct(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Overloads Sub CreatePCDSPAcctAsync(ByVal strXmlRequest As String, ByVal strRequestSystem As String)
            Me.CreatePCDSPAcctAsync(strXmlRequest, strRequestSystem, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub CreatePCDSPAcctAsync(ByVal strXmlRequest As String, ByVal strRequestSystem As String, ByVal userState As Object)
            If (Me.CreatePCDSPAcctOperationCompleted Is Nothing) Then
                Me.CreatePCDSPAcctOperationCompleted = AddressOf Me.OnCreatePCDSPAcctOperationCompleted
            End If
            Me.InvokeAsync("CreatePCDSPAcct", New Object() {strXmlRequest, strRequestSystem}, Me.CreatePCDSPAcctOperationCompleted, userState)
        End Sub

        Private Sub OnCreatePCDSPAcctOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreatePCDSPAcctCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreatePCDSPAcctCompleted(Me, New CreatePCDSPAcctCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ServiceAuthHeaderValue"), _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TransferPracticeInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function TransferPracticeInfo(ByVal strXmlRequest As String, ByVal strRequestSystem As String) As String
            Dim results() As Object = Me.Invoke("TransferPracticeInfo", New Object() {strXmlRequest, strRequestSystem})
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Function BeginTransferPracticeInfo(ByVal strXmlRequest As String, ByVal strRequestSystem As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("TransferPracticeInfo", New Object() {strXmlRequest, strRequestSystem}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndTransferPracticeInfo(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Overloads Sub TransferPracticeInfoAsync(ByVal strXmlRequest As String, ByVal strRequestSystem As String)
            Me.TransferPracticeInfoAsync(strXmlRequest, strRequestSystem, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub TransferPracticeInfoAsync(ByVal strXmlRequest As String, ByVal strRequestSystem As String, ByVal userState As Object)
            If (Me.TransferPracticeInfoOperationCompleted Is Nothing) Then
                Me.TransferPracticeInfoOperationCompleted = AddressOf Me.OnTransferPracticeInfoOperationCompleted
            End If
            Me.InvokeAsync("TransferPracticeInfo", New Object() {strXmlRequest, strRequestSystem}, Me.TransferPracticeInfoOperationCompleted, userState)
        End Sub

        Private Sub OnTransferPracticeInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.TransferPracticeInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TransferPracticeInfoCompleted(Me, New TransferPracticeInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ServiceAuthHeaderValue"), _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckIsActiveSP", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function CheckIsActiveSP(ByVal strXmlRequest As String, ByVal strRequestSystem As String) As String
            Dim results() As Object = Me.Invoke("CheckIsActiveSP", New Object() {strXmlRequest, strRequestSystem})
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Function BeginCheckIsActiveSP(ByVal strXmlRequest As String, ByVal strRequestSystem As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CheckIsActiveSP", New Object() {strXmlRequest, strRequestSystem}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndCheckIsActiveSP(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Overloads Sub CheckIsActiveSPAsync(ByVal strXmlRequest As String, ByVal strRequestSystem As String)
            Me.CheckIsActiveSPAsync(strXmlRequest, strRequestSystem, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub CheckIsActiveSPAsync(ByVal strXmlRequest As String, ByVal strRequestSystem As String, ByVal userState As Object)
            If (Me.CheckIsActiveSPOperationCompleted Is Nothing) Then
                Me.CheckIsActiveSPOperationCompleted = AddressOf Me.OnCheckIsActiveSPOperationCompleted
            End If
            Me.InvokeAsync("CheckIsActiveSP", New Object() {strXmlRequest, strRequestSystem}, Me.CheckIsActiveSPOperationCompleted, userState)
        End Sub

        Private Sub OnCheckIsActiveSPOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckIsActiveSPCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckIsActiveSPCompleted(Me, New CheckIsActiveSPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ServiceAuthHeaderValue"), _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HealthCheck", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function HealthCheck(ByVal strXmlRequest As String, ByVal strRequestSystem As String) As String
            Dim results() As Object = Me.Invoke("HealthCheck", New Object() {strXmlRequest, strRequestSystem})
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Function BeginHealthCheck(ByVal strXmlRequest As String, ByVal strRequestSystem As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("HealthCheck", New Object() {strXmlRequest, strRequestSystem}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndHealthCheck(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Overloads Sub HealthCheckAsync(ByVal strXmlRequest As String, ByVal strRequestSystem As String)
            Me.HealthCheckAsync(strXmlRequest, strRequestSystem, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub HealthCheckAsync(ByVal strXmlRequest As String, ByVal strRequestSystem As String, ByVal userState As Object)
            If (Me.HealthCheckOperationCompleted Is Nothing) Then
                Me.HealthCheckOperationCompleted = AddressOf Me.OnHealthCheckOperationCompleted
            End If
            Me.InvokeAsync("HealthCheck", New Object() {strXmlRequest, strRequestSystem}, Me.HealthCheckOperationCompleted, userState)
        End Sub

        Private Sub OnHealthCheckOperationCompleted(ByVal arg As Object)
            If (Not (Me.HealthCheckCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent HealthCheckCompleted(Me, New HealthCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ServiceAuthHeaderValue"), _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadVerifiedEnrolment", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function UploadVerifiedEnrolment(ByVal strXmlRequest As String, ByVal strRequestSystem As String) As String
            Dim results() As Object = Me.Invoke("UploadVerifiedEnrolment", New Object() {strXmlRequest, strRequestSystem})
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Function BeginUploadVerifiedEnrolment(ByVal strXmlRequest As String, ByVal strRequestSystem As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UploadVerifiedEnrolment", New Object() {strXmlRequest, strRequestSystem}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndUploadVerifiedEnrolment(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Overloads Sub UploadVerifiedEnrolmentAsync(ByVal strXmlRequest As String, ByVal strRequestSystem As String)
            Me.UploadVerifiedEnrolmentAsync(strXmlRequest, strRequestSystem, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub UploadVerifiedEnrolmentAsync(ByVal strXmlRequest As String, ByVal strRequestSystem As String, ByVal userState As Object)
            If (Me.UploadVerifiedEnrolmentOperationCompleted Is Nothing) Then
                Me.UploadVerifiedEnrolmentOperationCompleted = AddressOf Me.OnUploadVerifiedEnrolmentOperationCompleted
            End If
            Me.InvokeAsync("UploadVerifiedEnrolment", New Object() {strXmlRequest, strRequestSystem}, Me.UploadVerifiedEnrolmentOperationCompleted, userState)
        End Sub

        Private Sub OnUploadVerifiedEnrolmentOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadVerifiedEnrolmentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadVerifiedEnrolmentCompleted(Me, New UploadVerifiedEnrolmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ServiceAuthHeaderValue"), _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckAvailableForVerifiedEnrolment", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function CheckAvailableForVerifiedEnrolment(ByVal strXmlRequest As String, ByVal strRequestSystem As String) As String
            Dim results() As Object = Me.Invoke("CheckAvailableForVerifiedEnrolment", New Object() {strXmlRequest, strRequestSystem})
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Function BeginCheckAvailableForVerifiedEnrolment(ByVal strXmlRequest As String, ByVal strRequestSystem As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CheckAvailableForVerifiedEnrolment", New Object() {strXmlRequest, strRequestSystem}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndCheckAvailableForVerifiedEnrolment(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Overloads Sub CheckAvailableForVerifiedEnrolmentAsync(ByVal strXmlRequest As String, ByVal strRequestSystem As String)
            Me.CheckAvailableForVerifiedEnrolmentAsync(strXmlRequest, strRequestSystem, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub CheckAvailableForVerifiedEnrolmentAsync(ByVal strXmlRequest As String, ByVal strRequestSystem As String, ByVal userState As Object)
            If (Me.CheckAvailableForVerifiedEnrolmentOperationCompleted Is Nothing) Then
                Me.CheckAvailableForVerifiedEnrolmentOperationCompleted = AddressOf Me.OnCheckAvailableForVerifiedEnrolmentOperationCompleted
            End If
            Me.InvokeAsync("CheckAvailableForVerifiedEnrolment", New Object() {strXmlRequest, strRequestSystem}, Me.CheckAvailableForVerifiedEnrolmentOperationCompleted, userState)
        End Sub

        Private Sub OnCheckAvailableForVerifiedEnrolmentOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckAvailableForVerifiedEnrolmentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckAvailableForVerifiedEnrolmentCompleted(Me, New CheckAvailableForVerifiedEnrolmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ServiceAuthHeaderValue"), _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckAccountStatus", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function CheckAccountStatus(ByVal strXmlRequest As String, ByVal strRequestSystem As String) As String
            Dim results() As Object = Me.Invoke("CheckAccountStatus", New Object() {strXmlRequest, strRequestSystem})
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Function BeginCheckAccountStatus(ByVal strXmlRequest As String, ByVal strRequestSystem As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CheckAccountStatus", New Object() {strXmlRequest, strRequestSystem}, callback, asyncState)
        End Function

        '''<remarks/>
        Public Function EndCheckAccountStatus(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Overloads Sub CheckAccountStatusAsync(ByVal strXmlRequest As String, ByVal strRequestSystem As String)
            Me.CheckAccountStatusAsync(strXmlRequest, strRequestSystem, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub CheckAccountStatusAsync(ByVal strXmlRequest As String, ByVal strRequestSystem As String, ByVal userState As Object)
            If (Me.CheckAccountStatusOperationCompleted Is Nothing) Then
                Me.CheckAccountStatusOperationCompleted = AddressOf Me.OnCheckAccountStatusOperationCompleted
            End If
            Me.InvokeAsync("CheckAccountStatus", New Object() {strXmlRequest, strRequestSystem}, Me.CheckAccountStatusOperationCompleted, userState)
        End Sub

        Private Sub OnCheckAccountStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckAccountStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckAccountStatusCompleted(Me, New CheckAccountStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1"), _
     System.SerializableAttribute(), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/"), _
     System.Xml.Serialization.XmlRootAttribute([Namespace]:="http://tempuri.org/", IsNullable:=False)> _
    Partial Public Class ServiceAuthHeader
        Inherits System.Web.Services.Protocols.SoapHeader

        Private usernameField As String

        Private passwordField As String

        Private anyAttrField() As System.Xml.XmlAttribute

        '''<remarks/>
        Public Property Username() As String
            Get
                Return Me.usernameField
            End Get
            Set(value As String)
                Me.usernameField = value
            End Set
        End Property

        '''<remarks/>
        Public Property Password() As String
            Get
                Return Me.passwordField
            End Get
            Set(value As String)
                Me.passwordField = value
            End Set
        End Property

        '''<remarks/>
        <System.Xml.Serialization.XmlAnyAttributeAttribute()> _
        Public Property AnyAttr() As System.Xml.XmlAttribute()
            Get
                Return Me.anyAttrField
            End Get
            Set(value As System.Xml.XmlAttribute())
                Me.anyAttrField = value
            End Set
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")> _
    Public Delegate Sub UploadEnrolInfoCompletedEventHandler(ByVal sender As Object, ByVal e As UploadEnrolInfoCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class UploadEnrolInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")> _
    Public Delegate Sub CreatePCDSPAcctCompletedEventHandler(ByVal sender As Object, ByVal e As CreatePCDSPAcctCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class CreatePCDSPAcctCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")> _
    Public Delegate Sub TransferPracticeInfoCompletedEventHandler(ByVal sender As Object, ByVal e As TransferPracticeInfoCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class TransferPracticeInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")> _
    Public Delegate Sub CheckIsActiveSPCompletedEventHandler(ByVal sender As Object, ByVal e As CheckIsActiveSPCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class CheckIsActiveSPCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")> _
    Public Delegate Sub HealthCheckCompletedEventHandler(ByVal sender As Object, ByVal e As HealthCheckCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class HealthCheckCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")> _
    Public Delegate Sub UploadVerifiedEnrolmentCompletedEventHandler(ByVal sender As Object, ByVal e As UploadVerifiedEnrolmentCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class UploadVerifiedEnrolmentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")> _
    Public Delegate Sub CheckAvailableForVerifiedEnrolmentCompletedEventHandler(ByVal sender As Object, ByVal e As CheckAvailableForVerifiedEnrolmentCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class CheckAvailableForVerifiedEnrolmentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String)
            End Get
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")> _
    Public Delegate Sub CheckAccountStatusCompletedEventHandler(ByVal sender As Object, ByVal e As CheckAccountStatusCompletedEventArgs)

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440"), _
     System.Diagnostics.DebuggerStepThroughAttribute(), _
     System.ComponentModel.DesignerCategoryAttribute("code")> _
    Partial Public Class CheckAccountStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String)
            End Get
        End Property
    End Class

End Namespace